&НаСервереБезКонтекста
Функция ПолучитьДом(стрДома,ДатаОткрытия,СвойствоМКД = Неопределено,ЗначениеМКД = Истина)
	
	
	ДомСсылка = Справочники.ркДома.НайтиПоНаименованию(стрДома.Наименование,Истина);
	
	Если Не ЗначениеЗаполнено(ДомСсылка) Тогда
		Если ЗначениеЗаполнено(стрДома.Улица) Тогда
			УлицаСсылка = Справочники.ркУлицы.НайтиПоНаименованию(стрДома.Улица,Истина);
			Если УлицаСсылка.Пустая() Тогда 
				УлицаОбъект = Справочники.ркУлицы.СоздатьЭлемент();
				УлицаОбъект.Наименование = стрДома.Улица;
				Если НЕ ЗначениеЗаполнено(УлицаОбъект.Код) Тогда
					УлицаОбъект.УстановитьНовыйКод();
				КонецЕсли;
				УлицаОбъект.ОбменДанными.Загрузка = Истина;
				УлицаОбъект.Записать();
				УлицаСсылка = УлицаОбъект.Ссылка;
			КонецЕсли;
		Иначе
			УлицаСсылка = Справочники.ркУлицы.НайтиПоНаименованию("Служебная",Истина);
			Если УлицаСсылка.Пустая() Тогда 
				УлицаОбъект = Справочники.ркУлицы.СоздатьЭлемент();
				УлицаОбъект.Наименование = "Служебная";
				Если НЕ ЗначениеЗаполнено(УлицаОбъект.Код) Тогда
					УлицаОбъект.УстановитьНовыйКод();
				КонецЕсли;
				УлицаОбъект.ОбменДанными.Загрузка = Истина;
				УлицаОбъект.Записать();
				УлицаСсылка = УлицаОбъект.Ссылка;
			КонецЕсли;			
		КонецЕсли;
		Если ЗначениеЗаполнено(стрДома.УК) Тогда
			УКСсылка = Справочники.Контрагенты.НайтиПоНаименованию(стрДома.УК,Истина);
			Если УКСсылка.Пустая() Тогда
				УКОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				УКОбъект.Наименование = стрДома.УК;
				Если НЕ ЗначениеЗаполнено(УКОбъект.Код) Тогда
					УКОбъект.УстановитьНовыйКод();
				КонецЕсли;
				УКОбъект.ОбменДанными.Загрузка = Истина;
				УКОбъект.Записать();
				УКСсылка = УКОбъект.Ссылка;
			КонецЕсли;
		Иначе
			УКСсылка = Справочники.Контрагенты.НайтиПоНаименованию("Служебный",Истина);
			Если УКСсылка.Пустая() Тогда
				УКОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				УКОбъект.Наименование = "Служебный";
				Если НЕ ЗначениеЗаполнено(УКОбъект.Код) Тогда
					УКОбъект.УстановитьНовыйКод();
				КонецЕсли;
				УКОбъект.ОбменДанными.Загрузка = Истина;
				УКОбъект.Записать();
				УКСсылка = УКОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ДомСсылка.Пустая() Тогда 
			ДомОбъект = Справочники.ркДома.СоздатьЭлемент();
			ДомОбъект.Наименование = стрДома.Наименование;
			ДомОбъект.Корпус = стрДома.Корпус;
			ДомОбъект.Номер = стрДома.Номер;
			ДомОбъект.ДатаПостановкиНаУчет 	= СтрДома.ДатаПостановкиНаУчет;
			ДомОбъект.ДатаСнятияСУчета 		= СтрДома.ДатаСнятияСУчета;
			ДомОбъект.Владелец = УлицаСсылка;
			ДомОбъект.УК = УКСсылка;
			Если НЕ ЗначениеЗаполнено(ДомОбъект.Код) Тогда
				ДомОбъект.УстановитьНовыйКод();
			КонецЕсли;
			Если СвойствоМКД <> Неопределено Тогда
				СтрокаТЧ = ДомОбъект.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = СвойствоМКД;
				СтрокаТЧ.Значение = ЗначениеМКД;
			КонецЕсли;
			ДомОбъект.ОбменДанными.Загрузка = Истина;
			ДомОбъект.Записать();
			ДомСсылка = ДомОбъект.Ссылка;
		КонецЕсли;

	КонецЕсли;
	
	Возврат ДомСсылка;
	
	
	
КонецФункции

&НаСервере
Функция ПолучитьКонстантыОбработки()

	КонстантыОбработки = Новый Структура();	
	КонстантыОбработки.Вставить("ТипПомещенияКвартира",Справочники.ркТипыПомещений.НайтиПоНаименованию("квартира",Истина));
	КонстантыОбработки.Вставить("ВидРасчетаЭлектроэнергия",Справочники.ркВидыРасчетов.НайтиПоНаименованию("Электроэнергия",Истина));
	КонстантыОбработки.Вставить("ВидПоказанийОбычные",Справочники.ркВидыПоказанийСчетчиков.Обычные);
	КонстантыОбработки.Вставить("КубМетр",Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("113",Истина));
	КонстантыОбработки.Вставить("Квтч",Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("245",Истина));
	КонстантыОбработки.Вставить("Человек",Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("792",Истина));
	КонстантыОбработки.Вставить("ЕдиницаКоличествоПроживающих",Справочники.ркЕдиницыРасчета.НайтиПоНаименованию("Количество проживающих",Истина));
	КонстантыОбработки.Вставить("ЕдиницаСчетчик",Справочники.ркЕдиницыРасчета.НайтиПоНаименованию("Счетчик",Истина));
	КонстантыОбработки.Вставить("Организация",Организация);
	КонстантыОбработки.Вставить("Поставщик",Справочники.Контрагенты.НайтиПоНаименованию("АЭСК",Истина));
	
	КонстантыОбработки.Вставить("СвойствоДатаПоверки",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаПоверки);
	//КонстантыОбработки.Вставить("СвойствоДатаПроверки",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаПроверки);
	КонстантыОбработки.Вставить("СвойствоМежповерочныйИнтервал",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МежповерочныйИнтервал);	
	КонстантыОбработки.Вставить("КоличествоЧеловекНормы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Количество проживающих",Истина));
	КонстантыОбработки.Вставить("КоличествоКомнатНормы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Количество комнат",Истина));
	КонстантыОбработки.Вставить("МКДНормы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("МКД (Виды норм)",Истина));
	КонстантыОбработки.Вставить("МОПНормы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("МОП (Виды норм)",Истина));
	КонстантыОбработки.Вставить("ТипПлитыНормы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип плиты",Истина));
	КонстантыОбработки.Вставить("СвойствоНомерДоговора",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер договора (Лицевой счет)",Истина));
	КонстантыОбработки.Вставить("СвойствоОтдельныйВвод",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Отдельный ввод (Лицевой счет)",Истина));
	КонстантыОбработки.Вставить("СвойствоОтключен",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Отключен (Счетчик)",Истина));
	КонстантыОбработки.Вставить("СвойствоУчаствуетВМОП",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Участвует в МОП (Лицевой счет)",Истина));
	КонстантыОбработки.Вставить("СвойствоТипПрибораУчета",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Тип прибора учета (Счетчик)",Истина));
	КонстантыОбработки.Вставить("СвойствоНомерПломбы",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер пломбы (Счетчик)",Истина));
	КонстантыОбработки.Вставить("СвойствоДатаУстановки",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Дата установки (Счетчик)",Истина));
	КонстантыОбработки.Вставить("СвойствоЕИРЦНомерПУ",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ЕИРЦ номер ПУ (Счетчик)",Истина));
	КонстантыОбработки.Вставить("СвойствоЭтажность",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Этажность (Дом)",Истина));
	КонстантыОбработки.Вставить("СвойствоКоэффициент",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КоэффициентТрансформации);
	КонстантыОбработки.Вставить("СвойствоПлощадь",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОбщаяПлощадьЛицевогоСчета);
	КонстантыОбработки.Вставить("СвойствоВидЭнергоназначений",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Вид энергоназначений (Счетчик)",Истина));	
	КонстантыОбработки.Вставить("СвойствоПлощадьМОП",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Площадь МОП (Дом)",Истина));	
	КонстантыОбработки.Вставить("СвойствоИсходныйКод",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Исходный код",Истина));	
	Возврат КонстантыОбработки;

КонецФункции // ПолучитьКонстантыОбработки()


&НаСервере
Процедура ПрочитатьСвойстваНаСервере(пАдрес)
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	//сначала свойства, которые используются для видов норм
	ПараметрыОтбора = Новый Структура("Наименование", "КоличествоКомнат");
	Если РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
		НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
		НоваяСтрока.Наименование = "КоличествоКомнат";
	КонецЕсли;				
	ПараметрыОтбора = Новый Структура("Наименование", "КоличествоПрописанных");
	Если РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
		НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
		НоваяСтрока.Наименование = "КоличествоПрописанных";
	КонецЕсли;				
	ПараметрыОтбора = Новый Структура("Наименование", "ТипПлиты");
	Если РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
		НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
		НоваяСтрока.Наименование = "ТипПлиты";
	КонецЕсли;	
	ПараметрыОтбора = Новый Структура("Наименование", "МКД");
	Если РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
		НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
		НоваяСтрока.Наименование = "МКД";
	КонецЕсли;	
	//ПараметрыОтбора = Новый Структура("Наименование", "МОП");
	//Если РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
	//	НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
	//	НоваяСтрока.Наименование = "МОП";
	//КонецЕсли;	

	
	ДомаТЗ = ЗначениеИзФайла(ФайлПриемник);
	Для Каждого стрДом Из ДомаТЗ Цикл
		
		Для Каждого стрДопРеквизиты ИЗ стрДом.ДопРеквизиты Цикл
			//свойства домов
			ПараметрыОтбора = Новый Структура("Наименование", стрДопРеквизиты.Свойство);
			Если ЗначениеЗаполнено(стрДопРеквизиты.Свойство) И РеквизитыДомов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
				НоваяСтрока = РеквизитыДомов.Добавить();
				НоваяСтрока.Наименование = стрДопРеквизиты.Свойство;
			КонецЕсли;
		КонецЦикла;
		Если стрДом.ЛС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого стрЛС ИЗ стрДом.ЛС Цикл
			Если стрЛС.ДопРеквизитыЛС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого стрДопРеквизитыЛС Из стрЛС.ДопРеквизитыЛС Цикл
				ПараметрыОтбора = Новый Структура("Наименование", стрДопРеквизитыЛС.Свойство);
				Если ЗначениеЗаполнено(стрДопРеквизитыЛС.Свойство) И РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора).Количество()=0 Тогда
					НоваяСтрока = РеквизитыЛицевыхСчетов.Добавить();
					НоваяСтрока.Наименование = стрДопРеквизитыЛС.Свойство;
				КонецЕсли;				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСвойствоДома(пИмяСвойства)

	ПараметрыОтбора = Новый Структура("Наименование", пИмяСвойства);
	НайденныеСтроки = РеквизитыДомов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=0 Тогда
		Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Иначе
		Возврат НайденныеСтроки[0].Свойство;
	КонецЕсли;

КонецФункции

&НаСервере
Функция НайтиСвойствоЛС(пИмяСвойства)

	ПараметрыОтбора = Новый Структура("Наименование", пИмяСвойства);
	НайденныеСтроки = РеквизитыЛицевыхСчетов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=0 Тогда
		Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Иначе
		Возврат НайденныеСтроки[0].Свойство;
	КонецЕсли;

КонецФункции


&НаСервере
Функция ПолучитьЗначениеСвойства(пСвойство,пЗначение)
	
	Результат = Неопределено;
	Если пЗначение = NULL Тогда
		Возврат Результат;
	КонецЕсли;
	МассивТипов = пСвойство.ТипЗначения.Типы();
	Если МассивТипов.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))<>Неопределено Тогда
		Результат = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(пЗначение,Истина,,пСвойство);
		Если Результат.Пустая() Тогда
			НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			НовоеЗначение.Владелец = пСвойство;
			НовоеЗначение.Наименование = пЗначение;
			НовоеЗначение.Записать();
			Результат = НовоеЗначение.Ссылка;
		КонецЕсли;
	ИначеЕсли МассивТипов.Найти(Тип("Строка"))<>Неопределено Тогда		
		Результат = Строка(пЗначение);
	ИначеЕсли МассивТипов.Найти(Тип("Дата"))<>Неопределено Тогда
		Результат = Дата(пЗначение);
	ИначеЕсли МассивТипов.Найти(Тип("Число"))<>Неопределено Тогда
		Результат = Число(пЗначение);
	ИначеЕсли МассивТипов.Найти(Тип("Булево"))<>Неопределено Тогда
		Результат = Булево(пЗначение);
	КонецЕсли;
	
	Возврат Результат;
	
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗПоказаний()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВидПоказаний",Новый ОписаниеТипов("СправочникСсылка.ркВидыПоказанийСчетчиков"));
	ТЗ.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТЗ.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТЗ.Колонки.Добавить("Дом",Новый ОписаниеТипов("СправочникСсылка.ркДома"));
	ТЗ.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("ЛицевойСчет",Новый ОписаниеТипов("СправочникСсылка.ркЛицевыеСчета"));
	ТЗ.Колонки.Добавить("НачальноеКоличество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("КонечныеПоказания",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("ПериодДействия",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТЗ.Колонки.Добавить("Помещение",Новый ОписаниеТипов("СправочникСсылка.ркПомещения"));
	ТЗ.Колонки.Добавить("Счетчик",Новый ОписаниеТипов("СправочникСсылка.ркСчетчики"));
	ТЗ.Колонки.Добавить("Сброс",Новый ОписаниеТипов("Булево"));
	
	Возврат ТЗ;	

КонецФункции // ПолучитьТЗПоказаний()

&НаСервереБезКонтекста
Функция ПолучитьТЗПоказанийГПУ()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПериодПоказаний",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТЗ.Колонки.Добавить("Счетчик",Новый ОписаниеТипов("СправочникСсылка.ркСчетчики"));
	ТЗ.Колонки.Добавить("ВидПоказаний",Новый ОписаниеТипов("СправочникСсылка.ркВидыПоказанийСчетчиков"));	
	ТЗ.Колонки.Добавить("НачальныеПоказания",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("КонечныеПоказания",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗ.Колонки.Добавить("КоэффициентТрансформации",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	
	Возврат ТЗ;	

КонецФункции // ПолучитьТЗПоказаний()

&НаСервере	
Процедура ВосстановитьЗначения(пАдрес)
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);	
	
	ДомаТЗ = ЗначениеИзФайла(ФайлПриемник);
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	СтатусПроживает = Константы.ркСтатусПроживает.Получить();
	
	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	ДокИзм = Неопределено;
	ДокИзмГПУ = Неопределено;
	ДокПроживающие = Неопределено;
	ДокИзмИПУ = Неопределено;
	//ДокПоказанияСчетчиков = Неопределено;
	ДокОплата = Неопределено;
	ДокСоставНачислений = Неопределено;
	//ДокПоказанийГПУ = Неопределено;
	ТЗПоказаний = ПолучитьТЗПоказаний();
	ТЗПоказанийГПУ = ПолучитьТЗПоказанийГПУ();
	Для Каждого стрДомаТЗ Из ДомаТЗ Цикл
		Если Счетчик = 0 И НЕ ТранзакцияАктивна Тогда
			//НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			
			ДокИзм = Документы.ркИзменениеЗначенийСвойствОбъектов.СоздатьДокумент();
			ДокИзм.Дата = ДатаОткрытия;
			ДокИзм.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзм.Организация = Организация;
			ДокИзм.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			ДокИзмГПУ = Документы.ркИзменениеСостоянийСчетчиков.СоздатьДокумент();
			ДокИзмГПУ.Дата = ДатаОткрытия;
			ДокИзмГПУ.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзмГПУ.Организация = Организация;
			ДокИзмГПУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			ДокПроживающие = Документы.ркИзменениеСтатусовОбъектовРасчета.СоздатьДокумент();
			ДокПроживающие.Организация = Организация;
			ДокПроживающие.Дата = ДатаОткрытия;
			ДокПроживающие.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокПроживающие.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			ДокИзмИПУ = Документы.ркИзменениеСостоянийСчетчиков.СоздатьДокумент();
			ДокИзмИПУ.Организация = Организация;
			ДокИзмИПУ.Дата = ДатаОткрытия;
			ДокИзмИПУ.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзмИПУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			ДокОплата = Документы.ркОплата.СоздатьДокумент();
			ДокОплата.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
			ДокОплата.ТипОперации = Перечисления.ркТипыОперацийОплаты.ФормированиеАвансов;
			ДокОплата.СпособОплаты = Справочники.ркСпособыОплат.Основной;
			ДокОплата.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокОплата.Организация = Организация;
			ДокОплата.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			//ДокНачислениеГр = Документы.ркНачисления.СоздатьДокумент();
			//ДокНачислениеГр.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
			//ДокНачислениеГр.Организация = Организация;
			//ДокНачислениеГр.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			//ДокНачислениеГр.НаОбщедомовыеНужды = Истина;
			//ДокНачислениеГр.Комментарий = "Не проводить: Загрузка данных " + ТекущаяДата();
			//ДокНачислениеГр.Проведен = Истина;
			//ДокНачислениеГр.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			//ДокНачислениеГр.Записать(РежимЗаписиДокумента.Запись);
			//
			//НЗгр = РегистрыНакопления.ркНачисления.СоздатьНаборЗаписей();
			//НЗгр.Отбор.Регистратор.Установить(ДокНачислениеГр.Ссылка);
			//НЗгр.Прочитать();
			
			//ДокНачисление = Документы.ркНачисления.СоздатьДокумент();
			//ДокНачисление.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
			//ДокНачисление.Организация = Организация;
			//ДокНачисление.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			//ДокНачисление.Комментарий = "Не проводить: Загрузка данных " + ТекущаяДата();
			//ДокНачисление.Проведен = Истина;
			//ДокНачисление.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			//ДокНачисление.Записать(РежимЗаписиДокумента.Запись);
			
			//НЗ = РегистрыНакопления.ркНачисления.СоздатьНаборЗаписей();
			//НЗ.Отбор.Регистратор.Установить(ДокНачисление.Ссылка);
			//НЗ.Прочитать();
			
			НовыйКЗР = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
			НовыйКЗР.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			НовыйКЗР.Комментарий = "Перенос данных " + ТекущаяДата();
			НовыйКЗР.Проведен = Истина;
			НовыйКЗР.Дата = ДатаОткрытия;
			НовыйКЗР.Записать(РежимЗаписиДокумента.Запись);
			
			НЗЗадолженность = РегистрыНакопления.ркЗадолженностьЛицевыхСчетов.СоздатьНаборЗаписей();
			НЗЗадолженность.Отбор.Регистратор.Установить(НовыйКЗР.Ссылка);
		КонецЕсли;
		//Наименование
		//Улица
		//Номер
		//Корпус
		//ДатаПостановкиНаУчет
		//ДатаСнятияСУчета
		//ОДПУ (ТЗ)
		//Доп.реквизиты дома (ТЗ)
		//Лицевые счета (ТЗ)
		
		
		стрДома = Новый Структура("Наименование,Улица,Корпус,Номер,ДатаПостановкиНаУчет,ДатаСнятияСУчета,УК");
		ЗаполнитьЗначенияСвойств(стрДома,стрДомаТЗ);
		стрДома.Наименование = стрДомаТЗ.НаименованиеТекст;
		ДомСсылка = Справочники.ркДома.НайтиПоНаименованию(стрДома.Наименование,Истина);
		ЭтоНовыйДом = ДомСсылка.Пустая();
		текДом = ПолучитьДом(стрДома,ДатаОткрытия,КонстантыОбработки.МКДНормы,стрДомаТЗ.ДопРеквизиты.Количество()>0);
		ДомОбъект = текДом.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		текМОП = 0;
		ЕстьДатаИзменения = Ложь;
		Если стрДОмаТЗ.ДопРеквизиты.Колонки.Найти("ДатаИзменения")<>Неопределено Тогда
			ЕстьДатаИзменения = Истина;
		КонецЕсли;
		Если ЭтоНовыйДом Тогда
			Для Каждого стрДополнительныеРеквизитыТЗ Из стрДомаТЗ.ДопРеквизиты Цикл
				
				//Свойство
				//Значение
				//ДатаИзменения
				
				//Индекс, 
				//Площадь мест общего пользования, 
				//Площадь жилых помещений, 
				//ТЭЦ, 
				//Наличие ОДПУ, 
				//Адрес по мр./кв., 
				//УК (это реквизит справочника)
				
				//у частных домов нет допреквизитов.
				Если стрДополнительныеРеквизитыТЗ.Свойство = "ПлощадьМОП" Тогда
					текМОП = стрДополнительныеРеквизитыТЗ.Значение;
				КонецЕсли;
				текСвойство = НайтиСвойствоДома(стрДополнительныеРеквизитыТЗ.Свойство);
				текЗначение = ПолучитьЗначениеСвойства(текСвойство,стрДополнительныеРеквизитыТЗ.Значение);
				
				
				Если НЕ текСвойство.Пустая() И Не текЗначение = Неопределено Тогда
					Если Не текСвойство.Периодический Тогда
						
						НайденныеСтроки = ДомОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство",текСвойство));
						стр = ?(НайденныеСтроки.Количество()>0,НайденныеСтроки[0],ДомОбъект.ДополнительныеРеквизиты.Добавить());
						стр.Свойство = текСвойство;
						стр.Значение = текЗначение;
						ЕстьИзменения = Истина;
					Иначе
						текДатаИзменения = ?(ЕстьДатаИзменения,стрДополнительныеРеквизитыТЗ.ДатаИзменения,НачалоГода(ДатаОткрытия));
						СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", текДатаИзменения,текДом,текСвойство);
						НайденныеСтроки = докИзм.Состав.НайтиСтроки(СтруктураПоиска);
						НоваяСтрокаДок = Неопределено;
						Если НайденныеСтроки.Количество()>0 Тогда
							НоваяСтрокаДок = НайденныеСтроки[0];
						Иначе
							НоваяСтрокаДок = докИзм.Состав.Добавить();
						КонецЕсли;
						НоваяСтрокаДок.Объект = текДом;                                                 
						НоваяСтрокаДок.НачалоДействия = текДатаИзменения;
						НоваяСтрокаДок.Свойство = текСвойство;
						НоваяСтрокаДок.Значение = текЗначение;					
					КонецЕсли;		
				КонецЕсли;			
			КонецЦикла;
			Если ЕстьИзменения Тогда
				Если НЕ ЗначениеЗаполнено(ДомОбъект.Код) Тогда
					ДомОбъект.УстановитьНовыйКод();
				КонецЕсли;
				ДомОбъект.ОбменДанными.Загрузка = Истина;
				ДомОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		НаименованиеГруппыЛицевыхСчетов = стрДома.Улица+", "+стрДома.Номер + ?(ЗначениеЗаполнено(стрДома.Корпус),", "+стрДома.Корпус,"");
		ГруппаЛицевыхСчетов = Справочники.ркЛицевыеСчета.НайтиПоНаименованию(НаименованиеГруппыЛицевыхСчетов,Истина);
		Если ГруппаЛицевыхСчетов.Пустая() Тогда
			ГруппаЛицевыхСчетов = Справочники.ркЛицевыеСчета.СоздатьГруппу();
			ГруппаЛицевыхСчетов.Наименование = НаименованиеГруппыЛицевыхСчетов;
			Если НЕ ЗначениеЗаполнено(ГруппаЛицевыхСчетов.Код) Тогда
				ГруппаЛицевыхСчетов.УстановитьНовыйКод("Гр-");
			КонецЕсли;
			ГруппаЛицевыхСчетов.ОбменДанными.Загрузка = Истина;
			ГруппаЛицевыхСчетов.Записать();
			ГруппаЛицевыхСчетов = ГруппаЛицевыхСчетов.Ссылка;
		КонецЕсли;
		
		Для Каждого стрЛицевыеСчетаТЗ Из стрДомаТЗ.ЛС Цикл
			
			//НомерЛС
			//Наименование
			//ПомещениеНаименование
			//ПомещениеНомер
			//ПомещениеЖилоеМуниципальное
			//ОтветственныйКвартиросъемщик
			//НежилоеПомещение
			//НевыясненнаяСумма
			//ЖилоеМуниципальное
			//ОтветственныйКвартиросъемщикФамилия
			//ОтветственныйКвартиросъемщикИмя
			//ОтветственныйКвартиросъемщикОтчество
			//ОтветственныйКвартиросъемщикДатаРождения
			//ОтветственныйКвартиросъемщикПол
			//ДатаОткрытия
			//ДатаЗакрытия
			//ДополнительныеРеквизиты (ТЗ)
			//ОбъектыРасчета (ТЗ)
			//Счетчики (ТЗ)
			//Сальдо (ТЗ)
			//Нормативы (ТЗ)
			
			//текДОм, ГруппаЛицевыхСчетов
			
			ЛССсылка = Справочники.ркЛицевыеСчета.НайтиПоКоду(стрЛицевыеСчетаТЗ.НомерЛС);
			Если НЕ ЛССсылка.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ПомещениеСсылка = Справочники.ркПомещения.НайтиПоНаименованию(стрЛицевыеСчетаТЗ.ПомещениеНаименование,Истина,,текДом);
			Если ПомещениеСсылка.Пустая() Тогда
				ПомещениеОбъект = Справочники.ркПомещения.СоздатьЭлемент();
				ПомещениеОбъект.Наименование = стрЛицевыеСчетаТЗ.ПомещениеНаименование;
				ПомещениеОбъект.Номер = ?(ЗначениеЗаполнено(стрЛицевыеСчетаТЗ.ПомещениеНомер),стрЛицевыеСчетаТЗ.ПомещениеНомер,"0");
				ПомещениеОбъект.Владелец = текДом;
				ПомещениеОбъект.Тип = КонстантыОбработки.ТипПомещенияКвартира;
				ПомещениеОбъект.ЖилоеМуниципальное = стрЛицевыеСчетаТЗ.ЖилоеМуниципальное;
				Если НЕ ЗначениеЗаполнено(ПомещениеОбъект.Код) Тогда
					ПомещениеОбъект.УстановитьНовыйКод();
				КонецЕсли;
				ПомещениеОбъект.ОбменДанными.Загрузка = Истина;
				ПомещениеОбъект.Записать();				
				ПомещениеСсылка = ПомещениеОбъект.Ссылка;
			КонецЕсли;
			
			ЛицевойСчетОбъект = Справочники.ркЛицевыеСчета.СоздатьЭлемент();
			ЛицевойСчетОбъект.Родитель = ГруппаЛицевыхСчетов;
			ЛицевойСчетОбъект.Наименование = стрЛицевыеСчетаТЗ.Наименование;
			ЛицевойСчетОбъект.Код = стрЛицевыеСчетаТЗ.НомерЛС;
			ЛицевойСчетОбъект.ДатаОткрытия = стрЛицевыеСчетаТЗ.ДатаОткрытия;
			ЛицевойСчетОбъект.ДатаЗакрытия = стрЛицевыеСчетаТЗ.ДатаЗакрытия;
			ЛицевойСчетОбъект.Дом = текДом;
			ЛицевойСчетОбъект.Помещение= ПомещениеСсылка;
			
			ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицо.Наименование = стрЛицевыеСчетаТЗ.Наименование;
			ФизЛицо.ФИО = стрЛицевыеСчетаТЗ.Наименование;
			ФизЛицо.ОбменДанными.Загрузка = Истина;
			ФизЛицо.Записать();
			ЛицевойСчетОбъект.ОтветственныйКвартиросъемщик = ФизЛицо.Ссылка;
			
			Если НЕ ЗначениеЗаполнено(ЛицевойСчетОбъект.Код) Тогда
				ЛицевойСчетОбъект.УстановитьНовыйКод();
			КонецЕсли;
			ЛицевойСчетОбъект.ОбменДанными.Загрузка = Истина;
			ЛицевойСчетОбъект.Записать();
			текЛицевойСчет = ЛицевойСчетОбъект.Ссылка;
			
			Если стрЛицевыеСчетаТЗ.ДопРеквизитыЛС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//КоличествоПрописанных
			
			текКоличествоКомнат = 0;
			текТипПлиты = "";
			текКоличествоЧеловек = 0;
			текПлощадь = 0;
			ЕстьПериод = Ложь;
			Если стрЛицевыеСчетаТЗ.ДопРеквизитыЛС.Колонки.Найти("Период")<>Неопределено Тогда
				ЕстьПериод = Истина;
			КонецЕсли;
			Для Каждого стрДополнительныеРеквизитыТЗ Из стрЛицевыеСчетаТЗ.ДопРеквизитыЛС Цикл
				
				//Свойство
				//Значение
				//ДатаИзменения
				
				//ЖилоеМуниципальное
				//ДоговорЗаключен+
				//СтатусДоговора  +
				//НаличиеВодонагревателя+
				//СтепеньБлагоустройства +
				//КонтактныйТелефон
				//ЖилаяПлощадь
				//ОбщаяПлощадь+
				//МобильныйТелефон
				
				Если стрДополнительныеРеквизитыТЗ.Свойство = "КоличествоКомнат" Тогда
					текСвойство = КонстантыОбработки.КоличествоКомнатНормы;
					текКоличествоКомнат = стрДополнительныеРеквизитыТЗ.Значение;
				ИначеЕсли стрДополнительныеРеквизитыТЗ.Свойство = "Площадь" Тогда
					текСвойство = НайтиСвойствоЛС(стрДополнительныеРеквизитыТЗ.Свойство);
					текПлощадь = стрДополнительныеРеквизитыТЗ.Значение;
				ИначеЕсли стрДополнительныеРеквизитыТЗ.Свойство = "КоличествоПрописанных" Тогда
					текСвойство = КонстантыОбработки.КоличествоЧеловекНормы;
					текКоличествоЧеловек = стрДополнительныеРеквизитыТЗ.Значение;
				ИначеЕсли стрДополнительныеРеквизитыТЗ.Свойство = "ТипПлиты" Тогда
					текСвойство = КонстантыОбработки.ТипПлитыНормы;
					текТипПлиты = стрДополнительныеРеквизитыТЗ.Значение;
				Иначе			
					текСвойство = НайтиСвойствоЛС(стрДополнительныеРеквизитыТЗ.Свойство);				
				КонецЕсли;
				
				Если НЕ текСвойство.Пустая() И Не текЗначение = Неопределено Тогда
					текЗначение = ПолучитьЗначениеСвойства(текСвойство,стрДополнительныеРеквизитыТЗ.Значение);
					Если Не текСвойство.Периодический Тогда
						
						НайденныеСтроки = ЛицевойСчетОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство",текСвойство));
						стр = ?(НайденныеСтроки.Количество()>0,НайденныеСтроки[0],ЛицевойСчетОбъект.ДополнительныеРеквизиты.Добавить());
						стр.Свойство = текСвойство;
						стр.Значение = текЗначение;						
					Иначе	
						текПериод = ?(ЕстьПериод,стрДополнительныеРеквизитыТЗ.Период,НачалоГода(ДатаОткрытия));
						СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", текПериод,текЛицевойСчет,текСвойство);
						НайденныеСтроки = докИзм.Состав.НайтиСтроки(СтруктураПоиска);
						НоваяСтрокаДок = Неопределено;
						Если НайденныеСтроки.Количество() > 0 Тогда
							НоваяСтрокаДок = НайденныеСтроки[0];
						Иначе
							НоваяСтрокаДок = докИзм.Состав.Добавить();
						КонецЕсли;
						НоваяСтрокаДок.Объект = текЛицевойСчет;
						НоваяСтрокаДок.НачалоДействия = текПериод;
						НоваяСтрокаДок.Свойство = текСвойство;
						НоваяСтрокаДок.Значение = текЗначение;					
					КонецЕсли;
					
				КонецЕсли;		
				
				
			КонецЦикла;
			
			//Для Каждого стрОбъектыРасчета Из стрЛицевыеСчетаТЗ.ОбъектыРасчета Цикл
			//	//ОбъектРасчета
			//	//Фамилия
			//	//Имя
			//	//Отчество
			//	//ДатаРождения
			//	//Пол
			//	
			//	Пол = ?(стрОбъектыРасчета.Пол="М",Перечисления.ПолФизическогоЛица.Мужской,?(стрОбъектыРасчета.Пол="Ж",Перечисления.ПолФизическогоЛица.Женский,Перечисления.ПолФизическогоЛица.ПустаяСсылка()));
			//	
			//	ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			//	ФизЛицо.Наименование = стрОбъектыРасчета.ОбъектРасчета;
			//	ФизЛицо.ДатаРождения = стрОбъектыРасчета.ДатаРождения;
			//	ФизЛицо.Пол = Пол;
			//	ФизЛицо.ФИО = ""+стрОбъектыРасчета.Фамилия+" "+стрОбъектыРасчета.Имя+" "+стрОбъектыРасчета.Отчество;
			//	ФизЛицо.Записать();
			//	ФизЛицо = ФизЛицо.Ссылка;
			//	
			//	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			//	МенеджерЗаписи.Период = ДатаОткрытия;
			//	МенеджерЗаписи.ФизическоеЛицо = ФизЛицо;
			//	МенеджерЗаписи.Имя = стрОбъектыРасчета.Имя;
			//	МенеджерЗаписи.Отчество = стрОбъектыРасчета.Отчество;
			//	МенеджерЗаписи.Фамилия = стрОбъектыРасчета.Фамилия;
			//	МенеджерЗаписи.Записать(Истина);
			//	
			//	Если стрОбъектыРасчета.ОбъектРасчета = стрЛицевыеСчетаТЗ.ОтветственныйКвартиросъемщик Тогда
			//		ЛицевойСчетОбъект.ОтветственныйКвартиросъемщик = ФизЛицо;
			//	КонецЕсли;
			//	
			//	НоваяСтрокаПроживающий = ДокПроживающие.Состав.Добавить();
			//	НоваяСтрокаПроживающий.ЛицевойСчет = текЛицевойСчет;
			//	НоваяСтрокаПроживающий.НачалоДействия = ДатаОткрытия;
			//	НоваяСтрокаПроживающий.Включен = Истина;
			//	НоваяСтрокаПроживающий.ОбъектРасчета = ФизЛицо;
			//	НоваяСтрокаПроживающий.СтатусОбъектаРасчета = СтатусПроживает;
			//	
			//КонецЦикла;
			ЕстьСчетчик = Ложь;
			
			Для Каждого стрСчетчики Из стрЛицевыеСчетаТЗ.Счетчики Цикл
				Если стрСчетчики.Действует Тогда
					ЕстьСчетчик = Истина;
				КонецЕсли;
				//Наименование
				//ДатаВыпуска
				//Номер
				//КлассТочности
				//НачальныеПоказания
				//ДатаВключения //в документ
				//ДатаПоверки
				//ДатаПроверки
				//МежповерочныйИнтервал
				//ПоказанияСчетчика (ТЗ)
				
				//Счетчики могут повторяться.
				текСчетчик = Справочники.ркСчетчики.НайтиПоРеквизиту("Номер",стрСчетчики.Номер,,ПомещениеСсылка);
				Если текСчетчик.Пустая() Тогда
					НовыйСчетчик = Справочники.ркСчетчики.СоздатьЭлемент();
					НовыйСчетчик.Владелец = текЛицевойСчет.Помещение;
					НовыйСчетчик.Наименование = стрСчетчики.Наименование;
				
					Если НЕ ЗначениеЗаполнено(НовыйСчетчик.Наименование) Тогда
						НовыйСчетчик.Наименование = КонстантыОбработки.ВидРасчетаЭлектроэнергия.Наименование +" "+текДом.Наименование+", "+ПомещениеСсылка.Тип.СокращенноеНаименование + " "+ПомещениеСсылка.Наименование;
					КонецЕсли;
				
					НовыйСчетчик.Номер = стрСчетчики.Номер;
					НовыйСчетчик.Уровень = Справочники.ркУровниСчетчиков.Индивидуальный;
					НовыйСчетчик.ОсновнойВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					НовыйСчетчик.КлассТочности = стрСчетчики.КлассТочности;
					НовыйСчетчик.ДатаВыпуска = стрСчетчики.ДатаВыпуска;
				
					СтрокаТЧ = НовыйСчетчик.ВидыРасчетов.Добавить();
					СтрокаТЧ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
					СтрокаТЧ.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					СтрокаТЧ.ЕдиницаРасчетаНормативногоКоличества = КонстантыОбработки.ЕдиницаКоличествоПроживающих;
				
					Если НЕ КонстантыОбработки.СвойствоДатаПоверки.Периодический Тогда
						стрДополнительныеРеквизиты = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
						стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоДатаПоверки;
						стрДополнительныеРеквизиты.Значение = стрСчетчики.ДатаПоверки;
					КонецЕсли;			
					Если НЕ КонстантыОбработки.СвойствоМежповерочныйИнтервал.Периодический Тогда
						стрДополнительныеРеквизиты = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
						стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоМежповерочныйИнтервал;
						стрДополнительныеРеквизиты.Значение = стрСчетчики.МежповерочныйИнтервал;
					КонецЕсли;
				
					стрДополнительныеРеквизиты = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
					стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоТипПрибораУчета;
					стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(КонстантыОбработки.СвойствоТипПрибораУчета,стрСчетчики.ТипПрибораУчета);
					
					стрДополнительныеРеквизиты = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
					стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоВидЭнергоназначений;
					стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(КонстантыОбработки.СвойствоВидЭнергоназначений,стрСчетчики.ВидЭнергоназначений);				
					
					//поиск первых показаний
					стрСчетчики.ПоказанияСчетчика.Сортировать("ДатаПоказания Возр");
					//МассивВидовПоказаний = ОбщегоНазначенияКлиентСервер.СвернутьМассив(стрСчетчики.ПоказанияСчетчика.ВыгрузитьКолонку("ВидПоказаний"));					
					//Для Каждого текВидПоказаний Из МассивВидовПоказаний Цикл
						
						//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(текВидПоказаний,Истина);
						//Если ВидПоказанийСпр.Пустая() Тогда
						//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
						//	НовыйВидПоказаний.Наименование = текВидПоказаний;
						//	НовыйВидПоказаний.УстановитьНовыйКод();
						//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
						//	НовыйВидПоказаний.Записать();
						//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
						//КонецЕсли;				
						
						стрВидыПоказаний = НовыйСчетчик.ВидыПоказаний.Добавить();
						стрВидыПоказаний.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
						стрВидыПоказаний.ЕдиницыУчета = КонстантыОбработки.Квтч;
						Если стрСчетчики.ПоказанияСчетчика.Количество() > 0 Тогда
							стрВидыПоказаний.НачальныеПоказания = стрСчетчики.ПоказанияСчетчика[0].КонечноеПоказание;
						КонецЕсли;
						
					//КонецЦикла;
					
					Если НЕ ЗначениеЗаполнено(НовыйСчетчик.Код) Тогда
						НовыйСчетчик.УстановитьНовыйКод();
					КонецЕсли;
					НовыйСчетчик.ОбменДанными.Загрузка = Истина;
					НовыйСчетчик.Записать();
					текСчетчик = НовыйСчетчик.Ссылка;
					Если КонстантыОбработки.СвойствоДатаПоверки.Периодический Тогда
						стрДокИзм = ДокИзм.Состав.Добавить();
						стрДокИзм.НачалоДействия = НачалоГода(ДатаОткрытия);
						стрДокИзм.Объект = текСчетчик;
						стрДокИзм.Свойство = КонстантыОбработки.СвойствоДатаПоверки;
						стрДокИзм.Значение = стрСчетчики.ДатаПоверки;
					КонецЕсли;			
					Если КонстантыОбработки.СвойствоМежповерочныйИнтервал.Периодический Тогда
						стрДокИзм = ДокИзм.Состав.Добавить();
						стрДокИзм.НачалоДействия = НачалоГода(ДатаОткрытия);
						стрДокИзм.Объект = текСчетчик;
						стрДокИзм.Свойство = КонстантыОбработки.СвойствоМежповерочныйИнтервал;
						стрДокИзм.Значение = стрСчетчики.МежповерочныйИнтервал;
					КонецЕсли;
					
					ПервоеПоказание = Истина;
					Для Каждого стрПоказание Из стрСчетчики.ПоказанияСчетчика Цикл
						
						Если ПервоеПоказание Тогда
							ПервоеПоказание = Ложь;
							Продолжить;
						КонецЕсли;
						
						//ВидПоказаний
						//МетодРасчета
						//НачальноеПоказание
						//КонечноеПоказание
						//Количество
						//ДатаПоказания
						//ДатаНачалаПериодаПоказаний
						//ДатаКонцаПериодаПоказаний
						
						//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(стрПоказание.ВидПоказаний,Истина);
						//Если ВидПоказанийСпр.Пустая() Тогда
						//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
						//	НовыйВидПоказаний.Наименование = стрПоказание.ВидПоказаний;
						//	НовыйВидПоказаний.УстановитьНовыйКод();
						//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
						//	НовыйВидПоказаний.Записать();
						//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
						//КонецЕсли;
						
						НоваяСтрокаТЗ = ТЗПоказаний.Добавить();
						НоваяСтрокаТЗ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
						НоваяСтрокаТЗ.ДатаНачала = стрПоказание.ДатаНачалаПериодаПоказаний;
						НоваяСтрокаТЗ.ДатаОкончания = стрПоказание.ДатаКонцаПериодаПоказаний;
						НоваяСтрокаТЗ.Дом = текДом;
						НоваяСтрокаТЗ.Количество = стрПоказание.КонечноеПоказание - стрПоказание.НачальноеПоказание;
						НоваяСтрокаТЗ.ЛицевойСчет = текЛицевойСчет;
						НоваяСтрокаТЗ.НачальноеКоличество = стрПоказание.НачальноеПоказание;
						НоваяСтрокаТЗ.КонечныеПоказания = стрПоказание.КонечноеПоказание;
						НоваяСтрокаТЗ.ПериодДействия = НачалоМесяца(стрПоказание.ДатаНачалаПериодаПоказаний);
						НоваяСтрокаТЗ.Помещение = ПомещениеСсылка;
						НоваяСтрокаТЗ.Счетчик = текСчетчик;
						
					КонецЦикла
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Счетчик,НачалоДействия", текСчетчик,стрСчетчики.Период);
				НайденныеСтроки = ДокИзмИПУ.Состав.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					стрДокИзмИПУ = ДокИзмИПУ.Состав.Добавить();
				Иначе
					стрДокИзмИПУ = НайденныеСтроки[0];
				КонецЕсли;
				стрДокИзмИПУ.Включен = стрСчетчики.Действует;
				стрДокИзмИПУ.НачалоДействия = стрСчетчики.Период;
				стрДокИзмИПУ.Счетчик = текСчетчик;
				
			КонецЦикла;
			
			Для Каждого стрСальдо Из стрЛицевыеСчетаТЗ.Сальдо Цикл
				
				//УК
				//Услуга
				//ПериодДолга
				//СуммаДолга
				//НоваяСтрокаСоставОплаты = ДокОплата.Состав.Добавить();
				//НоваяСтрокаСоставОплаты.УК = текДом.УК;
				//НоваяСтрокаСоставОплаты.ЛицевойСчет = текЛицевойСчет;
				//НоваяСтрокаСоставОплаты.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;				
				//НоваяСтрокаСоставОплаты.Поставщик = КонстантыОбработки.Поставщик;
				//НоваяСтрокаСоставОплаты.ДатаОплаты = стрСальдо.ПериодДолга;
				//Если ЗначениеЗаполнено(стрСальдо.СуммаДолга) Тогда
				//	НоваяСтрокаСоставОплаты.Сумма = -стрСальдо.СуммаДолга;
				//КонецЕсли;
				
				НоваяЗапись = НЗЗадолженность.Добавить();
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
				НоваяЗапись.ДатаОплаты = стрСальдо.ПериодДолга;
				НоваяЗапись.ЛицевойСчет = текЛицевойСчет;
				НоваяЗапись.Период = ДатаОткрытия;
				НоваяЗапись.ПериодЗадолженности = стрСальдо.ПериодДолга;
				НоваяЗапись.Поставщик = КонстантыОбработки.Поставщик;
				НоваяЗапись.Сумма = стрСальдо.СуммаДолга;
				НоваяЗапись.УК = ТекДом.УК;
				
			КонецЦикла;
			
			СчетчикНачислений = 0;
			Для Каждого стрНачисление Из стрЛицевыеСчетаТЗ.Начисления Цикл
				
				//Период
				//ТипОперации
				//НаОбщедомовыеНужды
				//ВидНачисления
				//ПериодЗадолженности
				//УК
				//ВидТарифа
				//СуммаНачислений
				//КоличествоВПределахНормы
				
				//имяВидаТарифа
				//текКоличествоКомнат = "0";
				//текТипПлиты = "";
				//текМКД = "";
				//текМОП = "";
				//текКоличествоЧеловек = "0";
				
				//текНаименованиеГруппы = ?(стрНачисление.ВидТарифа = NULL, "", стрНачисление.ВидТарифа) +  " "+текКоличествоКомнат+" ком., "+?(текТипПлиты = NULL,"",текТипПлиты+ " пл., ")+текМКД+" МКД, "+текМОП +" МОП";
				
				Если СчетчикНачислений = 0 Тогда
					
					ДокСоставНачислений = Документы.ркИзменениеСоставаНачислений.СоздатьДокумент();
					ДокСоставНачислений.Дата = ДатаОткрытия;
					ДокСоставНачислений.Организация = Организация;
					ДокСоставНачислений.Комментарий = "Загрузка данных "+ТекущаяДата();
					ДокСоставНачислений.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					
					
					ДокНачисление = Документы.ркНачисления.СоздатьДокумент();
					ДокНачисление.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
					ДокНачисление.Организация = Организация;
					ДокНачисление.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					ДокНачисление.Комментарий = "Не проводить: Загрузка данных " + ТекущаяДата();
					ДокНачисление.Проведен = Истина;
					ДокНачисление.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
					ДокНачисление.Записать(РежимЗаписиДокумента.Запись);
					
					НЗ = РегистрыНакопления.ркНачисления.СоздатьНаборЗаписей();
					НЗ.Отбор.Регистратор.Установить(ДокНачисление.Ссылка);
					НЗ.Прочитать();
					
					ДокНачислениеГр = Документы.ркНачисления.СоздатьДокумент();
					ДокНачислениеГр.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
					ДокНачислениеГр.Организация = Организация;
					ДокНачислениеГр.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					ДокНачислениеГр.НаОбщедомовыеНужды = Истина;
					ДокНачислениеГр.Комментарий = "Не проводить: Загрузка данных " + ТекущаяДата();
					ДокНачислениеГр.Проведен = Истина;
					ДокНачислениеГр.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
					ДокНачислениеГр.Записать(РежимЗаписиДокумента.Запись);
					
					НЗгр = РегистрыНакопления.ркНачисления.СоздатьНаборЗаписей();
					НЗгр.Отбор.Регистратор.Установить(ДокНачислениеГр.Ссылка);
					НЗгр.Прочитать();				
					
				КонецЕсли;
				
				текНаименованиеГруппы = ?(ЗначениеЗаполнено(стрНачисление.ВидТарифа),стрНачисление.ВидТарифа,"Безымянный");
				
				текВидТарифа = Справочники.ркВидыТарифов.НайтиПоНаименованию(текНаименованиеГруппы,Истина); //здесь нужно искать используя доппараметры кроме людей.
				
				ЗаполнятьВидНормы = Истина;
				
				Если текВидТарифа.Пустая() и ЛЕВ(стрНачисление.ВидТарифа,СтрДлина("Электроплиты прибор учета")) = "Электроплиты прибор учета" Тогда
					Если текВидТарифа.Пустая() Тогда
						текНаименованиеГруппы = "Электроплиты прибор учета (день) город";
						текВидТарифа = Справочники.ркВидыТарифов.НайтиПоНаименованию(текНаименованиеГруппы,Истина);
					КонецЕсли;					
				КонецЕсли;
				
				Если текВидТарифа.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("НачалоДействия,ЛицевойСчет,ВидРасчета", НачалоДня(стрНачисление.Период), текЛицевойСчет, КонстантыОбработки.ВидРасчетаЭлектроэнергия);
				НайденныеСтроки = ДокСоставНачислений.Состав.НайтиСтроки(СтруктураПоиска);
				текЕдиницаРасчета = Неопределено;
				Если ЕстьСчетчик Тогда
					текЕдиницаРасчета = КонстантыОбработки.ЕдиницаСчетчик;
				Иначе
					текЕдиницаРасчета = КонстантыОбработки.ЕдиницаКоличествоПроживающих;
				КонецЕсли;
				
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрокаСоставНачислений = ДокСоставНачислений.Состав.Добавить();
					НоваяСтрокаСоставНачислений.НачалоДействия = НачалоДня(стрНачисление.Период);//+НоваяСтрокаСоставНачислений.НомерСтроки;
					НоваяСтрокаСоставНачислений.ЛицевойСчет = текЛицевойСчет;
					НоваяСтрокаСоставНачислений.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					НоваяСтрокаСоставНачислений.ВидТарифа = текВидТарифа;
					НоваяСтрокаСоставНачислений.СтатусУчастияВРасчетах = Справочники.ркСтатусыУчастияВРасчетах.Расчет;
					НоваяСтрокаСоставНачислений.ЕдиницаРасчета = текЕдиницаРасчета;
					НоваяСтрокаСоставНачислений.УК = текДом.УК;
				КонецЕсли;
				
				Если стрНачисление.НаОбщедомовыеНужды Тогда
					НоваяЗаписьНачислений = НЗгр.Добавить();
					Если стрНачисление.ТипОперации = "Текущие" Тогда
						НоваяЗаписьНачислений.ВидНачисления = Перечисления.ркВидыНачислений.ЕжемесячныеНачисления;
					Иначе
						НоваяЗаписьНачислений.ВидНачисления = Перечисления.ркВидыНачислений.КоррекцияПоГрупповымСчетчикам;
					КонецЕсли;
					НоваяЗаписьНачислений.ВидНормы = текВидТарифа.ВидНормы;
					НоваяЗаписьНачислений.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					НоваяЗаписьНачислений.ВидТарифа = текВидТарифа;
					НоваяЗаписьНачислений.ЕдиницаИзмерения = текВидТарифа.ЕдиницыУчета;
					НоваяЗаписьНачислений.ЕдиницаРасчета = текЕдиницаРасчета;
					НоваяЗаписьНачислений.КоличествоВПределахНормы = стрНачисление.КоличествоВПределахНормы;
					НоваяЗаписьНачислений.КоличествоСверхНормы = стрНачисление.КоличествоСверхНормы;
					НоваяЗаписьНачислений.ЛицевойСчет = текЛицевойСчет;
					НоваяЗаписьНачислений.НаОбщедомовыеНужды = Истина;
					НоваяЗаписьНачислений.Период = стрНачисление.Период;
					НоваяЗаписьНачислений.ПериодЗадолженности = стрНачисление.ПериодЗадолженности;
					НоваяЗаписьНачислений.Поставщик = КонстантыОбработки.Поставщик;
					НоваяЗаписьНачислений.СуммаНачислений = стрНачисление.СуммаНачислений;
					НоваяЗаписьНачислений.СуммаНачисленийВПределахНормы = стрНачисление.СуммаНачислений;
					НоваяЗаписьНачислений.Тариф = стрНачисление.ЗначениеТарифа;
					Если стрНачисление.ТипОперации = "Текущие" Тогда
						НоваяЗаписьНачислений.ТипОперации = Перечисления.ркТипыОперацийНачисления.НачисленияТекущегоПериода;
					Иначе
						НоваяЗаписьНачислений.ТипОперации = Перечисления.ркТипыОперацийНачисления.ПерерасчетыПрошлыхПериодов;
					КонецЕсли;
					НоваяЗаписьНачислений.УК = текДом.УК;
				Иначе
					НоваяЗаписьНачислений = НЗ.Добавить();
					НоваяЗаписьНачислений.ВидНачисления = Перечисления.ркВидыНачислений.ЕжемесячныеНачисления;
					НоваяЗаписьНачислений.ВидНормы = текВидТарифа.ВидНормы;
					НоваяЗаписьНачислений.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					НоваяЗаписьНачислений.ВидТарифа = текВидТарифа;
					НоваяЗаписьНачислений.ЕдиницаИзмерения = текВидТарифа.ЕдиницыУчета;
					НоваяЗаписьНачислений.ЕдиницаРасчета = текЕдиницаРасчета;
					НоваяЗаписьНачислений.КоличествоВПределахНормы = стрНачисление.КоличествоВПределахНормы;
					НоваяЗаписьНачислений.КоличествоСверхНормы = стрНачисление.КоличествоСверхНормы;
					НоваяЗаписьНачислений.ЛицевойСчет = текЛицевойСчет;
					НоваяЗаписьНачислений.НаОбщедомовыеНужды = Ложь;
					НоваяЗаписьНачислений.Период = стрНачисление.Период;
					НоваяЗаписьНачислений.ПериодЗадолженности = стрНачисление.ПериодЗадолженности;
					НоваяЗаписьНачислений.Поставщик = КонстантыОбработки.Поставщик;
					НоваяЗаписьНачислений.СуммаНачислений = стрНачисление.СуммаНачислений;
					НоваяЗаписьНачислений.СуммаНачисленийВПределахНормы = стрНачисление.СуммаНачислений;
					НоваяЗаписьНачислений.Тариф = стрНачисление.ЗначениеТарифа;
					Если стрНачисление.ТипОперации = "Текущие" Тогда
						НоваяЗаписьНачислений.ТипОперации = Перечисления.ркТипыОперацийНачисления.НачисленияТекущегоПериода;
					Иначе
						НоваяЗаписьНачислений.ТипОперации = Перечисления.ркТипыОперацийНачисления.ПерерасчетыПрошлыхПериодов;
					КонецЕсли;
					НоваяЗаписьНачислений.УК = текДом.УК;
				КонецЕсли;
				СчетчикНачислений = СчетчикНачислений+1;
				Если СчетчикНачислений >= 1000 Тогда
					Если ДокСоставНачислений.Состав.Количество() > 0 Тогда
						ДокСоставНачислений.Состав.Свернуть("НачалоДействия,ЛицевойСчет,ВидРасчета,ВидТарифа,СтатусУчастияВРасчетах,ЕдиницаРасчета,УК");
						ДокСоставНачислений.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
						ДокСоставНачислений.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					
					НЗ.Записать(Истина);
					НЗгр.Записать(Истина);
					
					СчетчикНачислений = 0;
				КонецЕсли;
				
			КонецЦикла;
			Если СчетчикНачислений > 0 Тогда
				
				
				Если ДокСоставНачислений.Состав.Количество() > 0 Тогда
					ДокСоставНачислений.Состав.Свернуть("НачалоДействия,ЛицевойСчет,ВидРасчета,ВидТарифа,СтатусУчастияВРасчетах,ЕдиницаРасчета,УК");
					ДокСоставНачислений.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
					ДокСоставНачислений.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				НЗ.Записать(Истина);
				НЗгр.Записать(Истина);
				
				СчетчикНачислений = 0;
				
			КонецЕсли;
			
			//Для Каждого стрНорматив Из стрЛицевыеСчетаТЗ.Нормативы Цикл
			//	
			//	//ДатаНорматива
			//	//Норматив
			//	
			//	
			//КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ЛицевойСчетОбъект.Код) Тогда
				ЛицевойСчетОбъект.УстановитьНовыйКод();
			КонецЕсли;
			ЛицевойСчетОбъект.ОбменДанными.Загрузка = Истина;
			ЛицевойСчетОбъект.Записать();
		КонецЦикла;
		
		Если ЭтоНовыйДом Тогда
			Для Каждого стрОдпуТЗ Из стрДомаТЗ.ОДПУ Цикл
				//Наименование
				//ДатаВыпуска
				//Номер
				//КлассТочности
				//НачальныеПоказания
				//ДатаВключения
				//ДатаПоверки
				//ДатаПроверки
				//МежповерочныйИнтервал
				
				//Счетчики могут повторяться
				текСчетчик = Справочники.ркСчетчики.НайтиПоРеквизиту("Номер",стрОдпуТЗ.Номер,,текДом);
				Если текСчетчик.Пустая() Тогда
					СчетчикОбъект = Справочники.ркСчетчики.СоздатьЭлемент();
					СчетчикОбъект.Групповой = Истина;
					СчетчикОбъект.Владелец = текДом;
					СчетчикОбъект.Наименование = стрОдпуТЗ.Наименование;
					СчетчикОбъект.ДатаВыпуска = стрОдпуТЗ.ДатаВыпуска;
					СчетчикОбъект.Номер = стрОдпуТЗ.Номер;
					СчетчикОбъект.КлассТочности = стрОдпуТЗ.КлассТочности;
					СчетчикОбъект.ОсновнойВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
					СчетчикОбъект.Уровень = Справочники.ркУровниСчетчиков.Общедомовой;
					
					Если НЕ КонстантыОбработки.СвойствоДатаПоверки.Периодический Тогда
						стрДополнительныеРеквизиты = СчетчикОбъект.ДополнительныеРеквизиты.Добавить();
						стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоДатаПоверки;
						стрДополнительныеРеквизиты.Значение = стрОдпуТЗ.ДатаПоверки;
					КонецЕсли;			
					Если НЕ ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КоэффициентТрансформации.Периодический Тогда
						стрДополнительныеРеквизиты = СчетчикОбъект.ДополнительныеРеквизиты.Добавить();
						стрДополнительныеРеквизиты.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КоэффициентТрансформации;
						стрДополнительныеРеквизиты.Значение = стрОдпуТЗ.КоэффициентТрансформации;
					КонецЕсли;			
					Если НЕ КонстантыОбработки.СвойствоМежповерочныйИнтервал.Периодический Тогда
						стрДополнительныеРеквизиты = СчетчикОбъект.ДополнительныеРеквизиты.Добавить();
						стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоМежповерочныйИнтервал;
						стрДополнительныеРеквизиты.Значение = стрОдпуТЗ.МежповерочныйИнтервал;
					КонецЕсли;
					
					стрДополнительныеРеквизиты = СчетчикОбъект.ДополнительныеРеквизиты.Добавить();
					стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоТипПрибораУчета;
					стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(КонстантыОбработки.СвойствоТипПрибораУчета,стрОдпуТЗ.ТипПрибораУчета);
					
					стрДополнительныеРеквизиты = СчетчикОбъект.ДополнительныеРеквизиты.Добавить();
					стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоВидЭнергоназначений;
					стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(КонстантыОбработки.СвойствоВидЭнергоназначений,стрОдпуТЗ.ВидЭнергоназначений);
					
					
					//МассивВидовПоказаний = ОбщегоНазначенияКлиентСервер.СвернутьМассив(стрОдпуТЗ.ПоказанияОДПУ.ВыгрузитьКолонку("ВидПоказаний"));					
					//Для Каждого текВидПоказаний Из МассивВидовПоказаний Цикл
						
						//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(текВидПоказаний,Истина);
						//Если ВидПоказанийСпр.Пустая() Тогда
						//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
						//	НовыйВидПоказаний.Наименование = текВидПоказаний;
						//	НовыйВидПоказаний.УстановитьНовыйКод();
						//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
						//	НовыйВидПоказаний.Записать();
						//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
						//КонецЕсли;				
						стрОдпуТЗ.ПоказанияОДПУ.Сортировать("ДатаПоказания Возр");
						
						стрВидыРасчетов = СчетчикОбъект.ВидыРасчетов.Добавить();
						стрВидыРасчетов.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
						стрВидыРасчетов.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
						стрВидыРасчетов.ЕдиницаРасчетаНормативногоКоличества = КонстантыОбработки.ЕдиницаКоличествоПроживающих;
						
						стрВидыПоказаний = СчетчикОбъект.ВидыПоказаний.Добавить();
						стрВидыПоказаний.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
						стрВидыПоказаний.ЕдиницыУчета = КонстантыОбработки.Квтч;
						Если стрОдпуТЗ.ПоказанияОДПУ.Количество()>0 Тогда
							стрВидыПоказаний.НачальныеПоказания = стрОдпуТЗ.ПоказанияОДПУ[0].КонечныеПоказания;
						КонецЕсли;
						
					//КонецЦикла;
					
					Если НЕ ЗначениеЗаполнено(СчетчикОбъект.Код) Тогда
						СчетчикОбъект.УстановитьНовыйКод();
					КонецЕсли;
					СчетчикОбъект.ОбменДанными.Загрузка = Истина;
					СчетчикОбъект.Записать();
					текСчетчик = СчетчикОбъект.Ссылка;
					
					Если КонстантыОбработки.СвойствоДатаПоверки.Периодический Тогда
						стрДокИзм = ДокИзм.Состав.Добавить();
						стрДокИзм.НачалоДействия = НачалоГода(ДатаОткрытия);
						стрДокИзм.Объект = СчетчикОбъект.Ссылка;
						стрДокИзм.Свойство = КонстантыОбработки.СвойствоДатаПоверки;
						стрДокИзм.Значение = стрОдпуТЗ.ДатаПоверки;
					КонецЕсли;			
					Если ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КоэффициентТрансформации.Периодический Тогда
						стрДокИзм = ДокИзм.Состав.Добавить();
						стрДокИзм.НачалоДействия = НачалоГода(ДатаОткрытия);
						стрДокИзм.Объект = СчетчикОбъект.Ссылка;
						стрДокИзм.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КоэффициентТрансформации;
						стрДокИзм.Значение = стрОдпуТЗ.КоэффициентТрансформации;
					КонецЕсли;			
					Если КонстантыОбработки.СвойствоМежповерочныйИнтервал.Периодический Тогда
						стрДокИзм = ДокИзм.Состав.Добавить();
						стрДокИзм.НачалоДействия = НачалоГода(ДатаОткрытия);
						стрДокИзм.Объект = СчетчикОбъект.Ссылка;
						стрДокИзм.Свойство = КонстантыОбработки.СвойствоМежповерочныйИнтервал;
						стрДокИзм.Значение = стрОдпуТЗ.МежповерочныйИнтервал;
					КонецЕсли;
					
					//ПоказанияОДПУ (ТЗ)
					
					ПервоеПоказание = Истина;
					
					Для Каждого стрПоказанияОдпуТЗ Из стрОдпуТЗ.ПоказанияОДПУ Цикл
						
						Если ПервоеПоказание Тогда
							ПервоеПоказание = Ложь;
							Продолжить;
						КонецЕсли;
						//ВидПоказаний
						//МетодРасчета
						//НачальноеПоказание
						//КонечноеПоказание
						//Количество
						//ДатаПоказания
						//ДатаНачалаПериодаПоказаний
						//ДатаКонцаПериодаПоказаний
						
						//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(стрПоказанияОдпуТЗ.ВидПоказаний,Истина);
						//Если ВидПоказанийСпр.Пустая() Тогда
						//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
						//	НовыйВидПоказаний.Наименование = стрПоказанияОдпуТЗ.ВидПоказаний;
						//	НовыйВидПоказаний.УстановитьНовыйКод();
						//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
						//	НовыйВидПоказаний.Записать();
						//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
						//КонецЕсли;
						
						СтрокаТЗГПУ = ТЗПоказанийГПУ.Добавить();
						СтрокаТЗГПУ.ПериодПоказаний = стрПоказанияОдпуТЗ.ДатаПоказания;
						СтрокаТЗГПУ.Счетчик = СчетчикОбъект.Ссылка;
						СтрокаТЗГПУ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
						СтрокаТЗГПУ.НачальныеПоказания = стрПоказанияОдпуТЗ.НачальныеПоказания;
						СтрокаТЗГПУ.КонечныеПоказания = стрПоказанияОдпуТЗ.КонечныеПоказания;
						СтрокаТЗГПУ.Количество = стрПоказанияОдпуТЗ.Количество;
						СтрокаТЗГПУ.КоэффициентТрансформации = ?(ЗначениеЗаполнено(стрОдпуТЗ.КоэффициентТрансформации),стрОдпуТЗ.КоэффициентТрансформации,1);
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Счетчик,НачалоДействия", текСчетчик,стрОдпуТЗ.Период);
				НайденныеСтроки = ДокИзмГПУ.Состав.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					стрДокИзмГПУ = ДокИзмГПУ.Состав.Добавить();
				Иначе
					стрДокИзмГПУ = НайденныеСтроки[0];
				КонецЕсли;
				стрДокИзмГПУ.Включен = стрОдпуТЗ.Действует;
				стрДокИзмГПУ.НачалоДействия = стрОдпуТЗ.Период;
				стрДокИзмГПУ.Счетчик = текСчетчик;

			КонецЦикла;
		КонецЕсли;
		Счетчик = Счетчик+1;
		
		Если Счетчик >= 500 И ТранзакцияАктивна Тогда 
			Если ДокИзм.Состав.Количество() > 0 Тогда
				ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокПроживающие.Состав.Количество() > 0 Тогда
				ДокПроживающие.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокПроживающие.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокИзмГПУ.Состав.Количество() > 0 Тогда
				ДокИзмГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзмГПУ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокИзмИПУ.Состав.Количество() > 0 Тогда
				ДокИзмИПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзмИПУ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокОплата.Состав.Количество() > 0 Тогда
				ДокОплата.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			//Если ДокСоставНачислений.Состав.Количество() > 0 Тогда
			//	ДокСоставНачислений.Состав.Свернуть("НачалоДействия,ЛицевойСчет,ВидРасчета,ВидТарифа,СтатусУчастияВРасчетах,ЕдиницаРасчета,УК");
			//	ДокСоставНачислений.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			//	ДокСоставНачислений.Записать(РежимЗаписиДокумента.Проведение);
			//КонецЕсли;
			//НЗ.Записать(Истина);
			//НЗгр.Записать(Истина);
			
			НЗЗадолженность.Записать(Истина);
			
			//ЗафиксироватьТранзакцию();
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна Тогда
		
		Если ДокИзм <> Неопределено и ДокИзм.Состав.Количество()>0 Тогда
			ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокИзмГПУ <> Неопределено и ДокИзмГПУ.Состав.Количество()>0 Тогда
			ДокИзмГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзмГПУ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокПроживающие <> Неопределено и ДокПроживающие.Состав.Количество()>0 Тогда
			ДокПроживающие.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПроживающие.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокИзмИПУ <> Неопределено и ДокИзмИПУ.Состав.Количество()>0 Тогда
			ДокИзмИПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзмИПУ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокОплата <> Неопределено и ДокОплата.Состав.Количество()>0 Тогда
			ДокОплата.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		//Если ДокСоставНачислений <> Неопределено и ДокСоставНачислений.Состав.Количество()>0 Тогда
		//	ДокСоставНачислений.Состав.Свернуть("НачалоДействия,ЛицевойСчет,ВидРасчета,ВидТарифа,СтатусУчастияВРасчетах,ЕдиницаРасчета,УК");
		//	ДокСоставНачислений.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
		//	ДокСоставНачислений.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли;

		//НЗ.Записать(Истина);
		//НЗгр.Записать(Истина);
		НЗЗадолженность.Записать(Истина);
		//ЗафиксироватьТранзакцию();
		
	КонецЕсли;

	ЗаписатьПоказания(ТЗПоказаний,КонстантыОбработки);
	ЗаписатьПоказанияГПУ(ТЗПоказанийГПУ,КонстантыОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоказания(пТЗ,КонстантыОбработки)
	
	пТЗ.Сортировать("ПериодДействия Возр,Счетчик Возр");
	ДокПоказанияСчетчиков = Неопределено;
	
	ТранзакцияАктивна = Ложь;
	ПредыдущийПериодДействия = Дата(1,1,1);
	ПредыдущийСчетчик = Справочники.ркСчетчики.ПустаяСсылка();
	Счетчик = 0;
	
	Для Каждого СтрокаТЗ ИЗ пТЗ Цикл
		Если СтрокаТЗ.ПериодДействия >= ДатаОграничения Тогда
			Продолжить;
		КонецЕсли;
		Если ТранзакцияАктивна И (Счетчик = 1000 ИЛИ СтрокаТЗ.ПериодДействия <> ПредыдущийПериодДействия ИЛИ СтрокаТЗ.Счетчик = ПредыдущийСчетчик) Тогда
			ДокПоказанияСчетчиков.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанияСчетчиков.Записать(РежимЗаписиДокумента.Проведение);			
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если НЕ ТранзакцияАктивна Тогда
			
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ДокПоказанияСчетчиков = Документы.ркПоказанияСчетчиков.СоздатьДокумент();
			ДокПоказанияСчетчиков.Дата = СтрокаТЗ.ПериодДействия;
			ДокПоказанияСчетчиков.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокПоказанияСчетчиков.Организация = Организация;
			ДокПоказанияСчетчиков.Ответственный = ПараметрыСеанса.ТекущийПользователь;			
			ДокПоказанияСчетчиков.ТипОперации = Перечисления.ркТипыОперацийПоказанийСчетчиков.ПоказанияЗаПериод;
			ДокПоказанияСчетчиков.ИсточникПоказаний = Перечисления.рцИсточникПоказанийИПУ.ИсторияПоказаний;
			
		КонецЕсли;
		
		НоваяСтрокаТЧ = ДокПоказанияСчетчиков.СоставРаспределенныхПоказаний.Добавить();
		НоваяСтрокаТЧ.ВидНачисления = Перечисления.ркВидыНачислений.ЕжемесячныеНачисления;
		НоваяСтрокаТЧ.ВидПоказаний = СтрокаТЗ.ВидПоказаний;
		НоваяСтрокаТЧ.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
		НоваяСтрокаТЧ.ДатаНачала = СтрокаТЗ.ДатаНачала;
		НоваяСтрокаТЧ.ДатаОкончания = СтрокаТЗ.ДатаОкончания;
		НоваяСтрокаТЧ.Делитель = 1;
		НоваяСтрокаТЧ.Дом = СтрокаТЗ.Дом;
		НоваяСтрокаТЧ.ЕдиницаИзмерения = КонстантыОбработки.Квтч;
		НоваяСтрокаТЧ.Количество = СтрокаТЗ.Количество;
		НоваяСтрокаТЧ.ЛицевойСчет = СтрокаТЗ.ЛицевойСчет;
		НоваяСтрокаТЧ.НачальноеКоличество = СтрокаТЗ.НачальноеКоличество;
		НоваяСтрокаТЧ.ПериодДействия = СтрокаТЗ.ПериодДействия;
		НоваяСтрокаТЧ.Помещение = СтрокаТЗ.Помещение;
		НоваяСтрокаТЧ.Счетчик = СтрокаТЗ.Счетчик;
		НоваяСтрокаТЧ.ТипОперации = Перечисления.ркТипыОперацийНачисления.НачисленияТекущегоПериода;
		НоваяСтрокаТЧ.Уровень = Справочники.ркУровниСчетчиков.Индивидуальный;
		
		НоваяСтрокаТЧСостав = ДокПоказанияСчетчиков.Состав.Добавить();
		НоваяСтрокаТЧСостав.ВидНачисления = НоваяСтрокаТЧ.ВидНачисления;
		НоваяСтрокаТЧСостав.ВидПоказаний = НоваяСтрокаТЧ.ВидПоказаний;
		НоваяСтрокаТЧСостав.ДатаНачалаПоказаний = НоваяСтрокаТЧ.ДатаНачала;
		НоваяСтрокаТЧСостав.ДатаОкончанияПоказаний = НоваяСтрокаТЧ.ДатаОкончания;
		НоваяСтрокаТЧСостав.Дом = НоваяСтрокаТЧ.Дом;
		НоваяСтрокаТЧСостав.Количество = НоваяСтрокаТЧ.Количество;
		НоваяСтрокаТЧСостав.КонечныеПоказания = СтрокаТЗ.КонечныеПоказания;
		НоваяСтрокаТЧСостав.ЛицевойСчет = НоваяСтрокаТЧ.ЛицевойСчет;
		НоваяСтрокаТЧСостав.НачальныеПоказания = НоваяСтрокаТЧ.НачальноеКоличество;
		НоваяСтрокаТЧСостав.Помещение = НоваяСтрокаТЧ.Помещение;
		НоваяСтрокаТЧСостав.Счетчик = НоваяСтрокаТЧ.Счетчик;
		
		Счетчик = Счетчик+1;
		ПредыдущийПериодДействия = СтрокаТЗ.ПериодДействия;
		ПредыдущийСчетчик = СтрокаТЗ.Счетчик;
	КонецЦикла;
	Если ТранзакцияАктивна Тогда
		Если ДокПоказанияСчетчиков <> Неопределено Тогда
			ДокПоказанияСчетчиков.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанияСчетчиков.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ЗаписатьПоказания()

&НаСервере
Процедура ЗаписатьПоказанияГПУ(пТЗ,КонстантыОбработки)
	
	пТЗ.Сортировать("ПериодПоказаний Возр");
	ДокПоказанийГПУ = Неопределено;
	
	ТранзакцияАктивна = Ложь;
	ПредыдущийПериодДействия = Дата(1,1,1);
	Счетчик = 0;
	
	Для Каждого СтрокаТЗ ИЗ пТЗ Цикл
		
		Если ТранзакцияАктивна И (Счетчик = 1000 ИЛИ СтрокаТЗ.ПериодПоказаний <> ПредыдущийПериодДействия) Тогда
			ДокПоказанийГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанийГПУ.Записать(РежимЗаписиДокумента.Проведение);			
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если НЕ ТранзакцияАктивна Тогда
			
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ДокПоказанийГПУ = Документы.ркПоказанияГрупповыхСчетчиков.СоздатьДокумент();
			ДокПоказанийГПУ.Дата = СтрокаТЗ.ПериодПоказаний;
			ДокПоказанийГПУ.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокПоказанийГПУ.Организация = Организация;
			ДокПоказанийГПУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ДокПоказанийГПУ.ПериодПоказаний = НачалоМесяца(СтрокаТЗ.ПериодПоказаний);
			ДокПоказанийГПУ.ТипОперации = Перечисления.ркТипыОперацийПоказанийСчетчиков.ПоказанияЗаПериод;			
		КонецЕсли;
		
		СтрокаПоказаний = ДокПоказанийГПУ.Состав.Добавить();
		СтрокаПоказаний.Счетчик = СтрокаТЗ.Счетчик;
		СтрокаПоказаний.ВидПоказаний = СтрокаТЗ.ВидПоказаний;
		СтрокаПоказаний.НачальныеПоказания = СтрокаТЗ.НачальныеПоказания;
		СтрокаПоказаний.КонечныеПоказания = СтрокаТЗ.КонечныеПоказания;
		СтрокаПоказаний.Количество = СтрокаТЗ.Количество;
		СтрокаПоказаний.КоэффициентТрансформации = СтрокаТЗ.КоэффициентТрансформации;
		
		ПредыдущийПериодДействия = СтрокаТЗ.ПериодПоказаний;
		Счетчик = Счетчик+1;
	КонецЦикла;

	Если ТранзакцияАктивна Тогда
		Если ДокПоказанийГПУ <> Неопределено Тогда
			ДокПоказанийГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанийГПУ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	
КонецПроцедуры // ЗаписатьПоказанияГПУ()


&НаСервере	
Процедура ВосстановитьНормыИТарифы(пАдрес)
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	НормыИТарифыТЗ = ЗначениеИзФайла(ФайлПриемник);
	СтатусПроживает = Константы.ркСтатусПроживает.Получить();
	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	ДокИзм = Неопределено;
	ДокИзмТарифа = Неопределено;
	ДокИзмСв = Неопределено;
	Для Каждого стрНормыИТарифыТЗ Из НормыИТарифыТЗ Цикл
		
		//Период
		//Наименование
		//Норматив
		//Тариф
		//
		//
		
		Если Счетчик = 0 И НЕ ТранзакцияАктивна Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ДокИзм = Документы.ркИзменениеНорм.СоздатьДокумент();
			ДокИзм.Дата = ДатаОткрытия;
			ДокИзм.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзм.Организация = Организация;
			ДокИзм.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			ДокИзмТарифа = Документы.ркИзменениеТарифов.СоздатьДокумент();
			ДокИзмТарифа.Дата = ДатаОткрытия;
			ДокИзмТарифа.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзмТарифа.Организация = Организация;
			ДокИзмТарифа.Ответственный = ПараметрыСеанса.ТекущийПользователь;

			ДокИзмСв = Документы.ркИзменениеЗначенийСвойствОбъектов.СоздатьДокумент();
			ДокИзмСв.Дата = ДатаОткрытия;
			ДокИзмСв.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзмСв.Организация = Организация;
			ДокИзмСв.Ответственный = ПараметрыСеанса.ТекущийПользователь;

			
			
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
		//Сгенерировать наименование
		
		//текНаименованиеГруппы = стрНормыИТарифыТЗ.Наименование +  " "
		//						+стрНормыИТарифыТЗ.КоличествоКомнат+" ком., "
		//						+?(стрНормыИТарифыТЗ.ТипПлиты = NULL,"",стрНормыИТарифыТЗ.ТипПлиты+ " пл., ")
		//						+стрНормыИТарифыТЗ.МКД+" МКД, "
		//						+стрНормыИТарифыТЗ.МОП +" МОП";
		текНаименованиеГруппы = ?(ЗначениеЗаполнено(стрНормыИТарифыТЗ.Наименование),стрНормыИТарифыТЗ.Наименование,"Безымянный");								
		текНаименование = ?(ЗначениеЗаполнено(стрНормыИТарифыТЗ.Наименование),стрНормыИТарифыТЗ.Наименование,"Безымянный") +  " "+стрНормыИТарифыТЗ.КоличествоКомнат+" ком., "+стрНормыИТарифыТЗ.КоличествоЧеловек+" чел., "+?(стрНормыИТарифыТЗ.ТипПлиты = NULL,"",стрНормыИТарифыТЗ.ТипПлиты+ " пл., ")+стрНормыИТарифыТЗ.МКД+" МКД";
		
		//создать группу норм
		
		текГруппаВидаНормы = Справочники.ркВидыНорм.НайтиПоНаименованию(текНаименованиеГруппы,Истина);
		текВидТарифа = Справочники.ркВидыТарифов.НайтиПоНаименованию(текНаименованиеГруппы,Истина);
		Если текГруппаВидаНормы.Пустая() Тогда
			НоваяГруппаВидаНормы = Справочники.ркВидыНорм.СоздатьГруппу();
			НоваяГруппаВидаНормы.Наименование = текНаименованиеГруппы;
			
			//1)
			НоваяСтрокаТЧ = НоваяГруппаВидаНормы.СоставСвойствПоискаВидаНормы.Добавить();
			НоваяСтрокаТЧ.СвойствоВидаНормыОт = КонстантыОбработки.КоличествоКомнатНормы;
			НоваяСтрокаТЧ.СвойствоВидаНормыПо = КонстантыОбработки.КоличествоКомнатНормы;
			НоваяСтрокаТЧ.СвойствоЛицевогоСчетаДома = КонстантыОбработки.КоличествоКомнатНормы;
			НоваяСтрокаТЧ.ТипОбъектаПоискаВидаНормы = Перечисления.ркТипыОбъектовПоискаВидовНорм.СправочникЛицевыхСчетов;
			//2)
			НоваяСтрокаТЧ = НоваяГруппаВидаНормы.СоставСвойствПоискаВидаНормы.Добавить();
			НоваяСтрокаТЧ.СвойствоВидаНормыОт = КонстантыОбработки.ТипПлитыНормы;
			НоваяСтрокаТЧ.СвойствоВидаНормыПо = КонстантыОбработки.ТипПлитыНормы;
			НоваяСтрокаТЧ.СвойствоЛицевогоСчетаДома = КонстантыОбработки.ТипПлитыНормы;
			НоваяСтрокаТЧ.ТипОбъектаПоискаВидаНормы = Перечисления.ркТипыОбъектовПоискаВидовНорм.СправочникЛицевыхСчетов;
			//3)
			НоваяСтрокаТЧ = НоваяГруппаВидаНормы.СоставСвойствПоискаВидаНормы.Добавить();
			НоваяСтрокаТЧ.СвойствоВидаНормыОт = КонстантыОбработки.МКДНормы;
			НоваяСтрокаТЧ.СвойствоВидаНормыПо = КонстантыОбработки.МКДНормы;
			НоваяСтрокаТЧ.СвойствоЛицевогоСчетаДома = КонстантыОбработки.МКДНормы;
			НоваяСтрокаТЧ.ТипОбъектаПоискаВидаНормы = Перечисления.ркТипыОбъектовПоискаВидовНорм.СправочникДомов;

			Если НЕ ЗначениеЗаполнено(НоваяГруппаВидаНормы.Код) Тогда
				НоваяГруппаВидаНормы.УстановитьНовыйКод();
			КонецЕсли;
			НоваяГруппаВидаНормы.ОбменДанными.Загрузка = Истина;
			НоваяГруппаВидаНормы.Записать();
			текГруппаВидаНормы = НоваяГруппаВидаНормы.Ссылка;
			
			
			Если текВидТарифа.Пустая() Тогда
				НовыйВидТарифа = Справочники.ркВидыТарифов.СоздатьЭлемент();
				НовыйВидТарифа.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
				НовыйВидТарифа.Наименование = текНаименованиеГруппы;
				НовыйВидТарифа.ЕдиницыУчета = КонстантыОбработки.Квтч;
				НовыйВидТарифа.ВидНормы = текГруппаВидаНормы;
				
				Если НЕ ЗначениеЗаполнено(НовыйВидТарифа.Код) Тогда
					НовыйВидТарифа.УстановитьНовыйКод();
				КонецЕсли;

				НовыйВидТарифа.ОбменДанными.Загрузка = Истина;
				НовыйВидТарифа.Записать();			
				
				текВидТарифа = НовыйВидТарифа.Ссылка;
			КонецЕсли;
						
		КонецЕсли;
		
		
		СтруктураПоиска = Новый Структура("ВидТарифа,НачалоДействия", текВидТарифа,стрНормыИТарифыТЗ.Период);
		НайденныеСтроки = ДокИзмТарифа.Состав.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДокТарифа = ДокИзмТарифа.Состав.Добавить();
			СтрокаДокТарифа.ВидТарифа = текВидТарифа;
			СтрокаДокТарифа.НачалоДействия = стрНормыИТарифыТЗ.Период;
		Иначе
			СтрокаДокТарифа = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаДокТарифа.ПериодДействияТарифа = Перечисления.ркПериодыДействияТарифа.Месяц;
		СтрокаДокТарифа.ТипТарифа  = Справочники.ркТипыТарифов.Основной;
		СтрокаДокТарифа.Цена = ?(стрНормыИТарифыТЗ.Тариф = NULL,0,стрНормыИТарифыТЗ.Тариф);
		
		текВидНормы = Справочники.ркВидыНорм.НайтиПоНаименованию(текНаименование,Истина);
		Если текВидНормы.Пустая() Тогда
			НовыйВидНормы = Справочники.ркВидыНорм.СоздатьЭлемент();
			НовыйВидНормы.Родитель = текГруппаВидаНормы;
			НовыйВидНормы.ЕдиницаИзмеренияИсходныхДанных = КонстантыОбработки.Человек;
			НовыйВидНормы.ЕдиницаИзмерения = КонстантыОбработки.Квтч;
			НовыйВидНормы.Наименование = текНаименование;
			НовыйВидНормы.НазначениеКоличестваОбъектовРасчета = стрНормыИТарифыТЗ.КоличествоЧеловек;
			СтрокаТЧ = НовыйВидНормы.НазначениеСоставСтатусовОбъектовРасчета.Добавить();
			СтрокаТЧ.СтатусОбъектовРасчета = СтатусПроживает;

			Если НЕ ЗначениеЗаполнено(НовыйВидНормы.Код) Тогда
				НовыйВидНормы.УстановитьНовыйКод();
			КонецЕсли;
			НовыйВидНормы.ОбменДанными.Загрузка = Истина;
			НовыйВидНормы.Записать();
			текВидНормы = НовыйВидНормы.Ссылка;
		КонецЕсли;
		
		//стрДокИзмСв = ДокИзмСв.Состав.Добавить();
		//стрДокИзмСв.НачалоДействия = ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24);
		//стрДокИзмСв.Объект = текВидНормы;
		//стрДокИзмСв.Свойство = НайтиСвойствоЛС("КоличествоПрописанных");;
		//стрДокИзмСв.Значение = стрНормыИТарифыТЗ.КоличествоЧеловек;
		
		СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24),текВидНормы,КонстантыОбработки.КоличествоКомнатНормы);
		НайденныеСтроки = ДокИзмСв.Состав.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			стрДокИзмСв = ДокИзмСв.Состав.Добавить();
			стрДокИзмСв.НачалоДействия = ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24);
			стрДокИзмСв.Объект = текВидНормы;
			стрДокИзмСв.Свойство = КонстантыОбработки.КоличествоКомнатНормы;
		Иначе
			стрДокИзмСв = НайденныеСтроки[0];
		КонецЕсли;
		стрДокИзмСв.Значение = стрНормыИТарифыТЗ.КоличествоКомнат;
		
		СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24),текВидНормы,КонстантыОбработки.ТипПлитыНормы);
		НайденныеСтроки = ДокИзмСв.Состав.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			стрДокИзмСв = ДокИзмСв.Состав.Добавить();
			стрДокИзмСв.НачалоДействия = ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24);
			стрДокИзмСв.Объект = текВидНормы;
			стрДокИзмСв.Свойство = КонстантыОбработки.ТипПлитыНормы;
		Иначе
			стрДокИзмСв = НайденныеСтроки[0];
		КонецЕсли;
		стрДокИзмСв.Значение = ПолучитьЗначениеСвойства(стрДокИзмСв.Свойство,стрНормыИТарифыТЗ.ТипПлиты);		

		СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24),текВидНормы,КонстантыОбработки.МКДНормы);
		НайденныеСтроки = ДокИзмСв.Состав.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			стрДокИзмСв = ДокИзмСв.Состав.Добавить();
			стрДокИзмСв.НачалоДействия = ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24);
			стрДокИзмСв.Объект = текВидНормы;
			стрДокИзмСв.Свойство = КонстантыОбработки.МКДНормы;
		Иначе
			стрДокИзмСв = НайденныеСтроки[0];
		КонецЕсли;
		стрДокИзмСв.Значение = ПолучитьЗначениеСвойства(стрДокИзмСв.Свойство,стрНормыИТарифыТЗ.МКД);		

		//СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24),текВидНормы,КонстантыОбработки.МОПНормы);
		//НайденныеСтроки = ДокИзмСв.Состав.НайтиСтроки(СтруктураПоиска);
		//Если НайденныеСтроки.Количество() = 0 Тогда
		//	стрДокИзмСв = ДокИзмСв.Состав.Добавить();
		//	стрДокИзмСв.НачалоДействия = ДобавитьМесяц(НачалоГода(ДатаОткрытия),-24);
		//	стрДокИзмСв.Объект = текВидНормы;
		//	стрДокИзмСв.Свойство = КонстантыОбработки.МОПНормы;
		//Иначе
		//	стрДокИзмСв = НайденныеСтроки[0];
		//КонецЕсли;
		//стрДокИзмСв.Значение = ПолучитьЗначениеСвойства(стрДокИзмСв.Свойство,стрНормыИТарифыТЗ.МОП);		

		
		СтруктураПоиска = Новый Структура("НачалоДействия,ВидНормы,ТипНормы", стрНормыИТарифыТЗ.Период,текВидНормы,Справочники.ркТипыНорм.Общий);
		НайденныеСтроки = ДокИзм.Состав.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДок = ДокИзм.Состав.Добавить();
			СтрокаДок.НачалоДействия = стрНормыИТарифыТЗ.Период;
			СтрокаДок.ВидНормы = текВидНормы;
			СтрокаДок.ТипНормы = Справочники.ркТипыНорм.Общий;
		Иначе
			СтрокаДок = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаДок.ЗначениеНормы = стрНормыИТарифыТЗ.Норматив;		
		
		Если Счетчик >= 1000 И ТранзакцияАктивна Тогда 
			Если ДокИзм.Состав.Количество() > 0 Тогда
				ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокИзмТарифа.Состав.Количество() > 0 Тогда
				ДокИзмТарифа.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзмТарифа.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Если ДокИзмСв.Состав.Количество() > 0 Тогда
				ДокИзмСв.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзмСв.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;

			ЗафиксироватьТранзакцию();
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна Тогда
		
		Если ДокИзм <> Неопределено и ДокИзм.Состав.Количество()>0 Тогда
			ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокИзмТарифа <> Неопределено и ДокИзмТарифа.Состав.Количество()>0 Тогда
			ДокИзмТарифа.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзмТарифа.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если ДокИзмСв <> Неопределено и ДокИзмСв.Состав.Количество()>0 Тогда
			ДокИзмСв.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзмСв.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	КонецЕсли;

	//спр ркВидыНорм
	//РС ркНормы
	//док ркИзменениеНорм
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлОбмена(Команда)
	
	СписокФайлов = НайтиФайлы(КаталогДанных,"Выгр*.dat");
	Для Каждого тФайл Из СписокФайлов Цикл
		Сообщить("Начало чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
		ФайлИсточник = тФайл.ПолноеИмя;
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));	
		ВосстановитьЗначения(Адрес);	
		Сообщить("Окончение чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
	КонецЦикла;

КонецПроцедуры



&НаКлиенте
Процедура ЗагрузитьНормыИТарифы(Команда)
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ВосстановитьНормыИТарифы(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаКлиенте
Процедура ПрочитатьСвойства(Команда)
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	//ПрочитатьСвойстваНаСервере(ДиалогВыбораФайла.ПолноеИмяФайла);
	ПрочитатьСвойстваНаСервере(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьОбъектыРасчета(Команда)
	ЗаполнитьОбъектыРасчетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектыРасчетаНаСервере()
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ркЗначенияПериодическихСвойствОбъектов.Объект КАК Объект,
		|	ркЗначенияПериодическихСвойствОбъектов.Значение,
		|	ркЗначенияПериодическихСвойствОбъектов.Период КАК Период,
		|	ВЫРАЗИТЬ(ркЗначенияПериодическихСвойствОбъектов.Объект КАК Справочник.ркЛицевыеСчета).Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ркЗначенияПериодическихСвойствОбъектов КАК ркЗначенияПериодическихСвойствОбъектов
		|ГДЕ
		|	ркЗначенияПериодическихСвойствОбъектов.Свойство = &Свойство
		|	И ркЗначенияПериодическихСвойствОбъектов.Объект ССЫЛКА Справочник.ркЛицевыеСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Объект";
	
	Запрос.УстановитьПараметр("Свойство", КонстантыОбработки.КоличествоЧеловекНормы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтатусПроживает = Константы.ркСтатусПроживает.Получить();
	
	ТранзакцияАктивна = Ложь;
	Счетчик = 0;
	Пока ВыборкаОбъект.Следующий() Цикл
		// Вставить обработку выборки ВыборкаОбъект
		
		Если НЕ ТранзакцияАктивна И Счетчик = 0 Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = ВыборкаОбъект.Выбрать();
		
		текКоличество = 0;
		СписокПроживающих = Новый СписокЗначений;
		//используем пометку
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокИзм = Документы.ркИзменениеСтатусовОбъектовРасчета.СоздатьДокумент();			
			ДокИзм.Дата = ВыборкаДетальныеЗаписи.Период;
			ДокИзм.Организация = Организация;
			ДокИзм.Комментарий = "Перенос данных "+ТекущаяДата();
			
			Разность = ВыборкаДетальныеЗаписи.Значение - текКоличество;
			Если Разность > 0 Тогда
				Для Р = 0 По Разность-1 Цикл
					//добавить
					//если есть в списке без пометки - восстанавливаем
					ФЛ = Неопределено;
					
					Для Каждого Элемент Из СписокПроживающих Цикл
						
						Если НЕ Элемент.Пометка Тогда
							
							ФЛ = Элемент.Значение;
							Элемент.Пометка = Истина;
							Прервать;
							
						КонецЕсли;
						Если ФЛ <> Неопределено Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ФЛ = Неопределено Тогда
						НовоеФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
						НовоеФЛ.УстановитьНовыйКод();
						НовоеФЛ.Наименование = ВыборкаДетальныеЗаписи.Наименование+" "+НовоеФЛ.Код;
						НовоеФЛ.ОбменДанными.Загрузка = Истина;
						НовоеФЛ.Записать();
						ФЛ = НовоеФЛ.Ссылка;
						СписокПроживающих.Добавить(ФЛ,,Истина);
					КонецЕсли;
					//если в списке нет - созаем физлицо, добавляем в список с пометкой
					//Документы.ркИзменениеСтатусовОбъектовРасчета
					
					стрДокИзм = ДокИзм.Состав.Добавить();
					стрДокИзм.НачалоДействия = ВыборкаДетальныеЗаписи.Период;
					стрДокИзм.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
					стрДокИзм.ОбъектРасчета = ФЛ;
					стрДокИзм.СтатусОбъектаРасчета = СтатусПроживает;
					стрДокИзм.Включен = Истина;
					
				КонецЦикла;
			Иначе
				Для Р = 0 По -Разность-1 Цикл
					//удалить
					//снимаем пометку в списке
					ФЛ = Неопределено;
					Для Каждого Элемент Из СписокПроживающих Цикл
						Если Элемент.Пометка Тогда
							ФЛ = Элемент.Значение;
							Элемент.Пометка = Ложь;
							Прервать;
						КонецЕсли;
						Если ФЛ <> Неопределено Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					стрДокИзм = ДокИзм.Состав.Добавить();
					стрДокИзм.НачалоДействия = ВыборкаДетальныеЗаписи.Период;
					стрДокИзм.ЛицевойСчет = ВыборкаДетальныеЗаписи.Объект;
					стрДокИзм.ОбъектРасчета = ФЛ;
					стрДокИзм.СтатусОбъектаРасчета = СтатусПроживает;
					стрДокИзм.Включен = Ложь;
					
					//Документы.ркИзменениеСтатусовОбъектовРасчета
				КонецЦикла;				
			КонецЕсли;
			текКоличество = ВыборкаДетальныеЗаписи.Значение;
			ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		Счетчик = Счетчик + 1;
		Если ТранзакцияАктивна И Счетчик >= 1000 Тогда
			ТранзакцияАктивна = Ложь;
			Счетчик = 0;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	Если ТранзакцияАктивна Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНежилые(Команда)
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ВосстановитьНежилые(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());

КонецПроцедуры

&НаСервере	
Процедура ВосстановитьНежилые(пАдрес)
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	НежилыеТЗ = ЗначениеИзФайла(ФайлПриемник);

	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	
	//
	
	// Абонент-нежилое помещение
	
	//ДатаДобавления	
	//ДатаРасторженияДоговора	
	//Наименование
	//НомерДоговора	
	//ОтдельныйВвод	
	//Площадь	
	//УчаствуетВМОП
	
	// // Дом // //
	//Код
	//Корпус
	//Дом
	//ДомНаименование
	//Улица
	
	// // Тариф // //
	//ТарифКод
	//ТарифНаименование
	
	// // Прибор учета // //
	//ПУКод
	//ПУНаименование
	//ЗаводскойНомер
	//ДатаВыпуска
	//ТипПрибораУчетаНаименование
	//НомерПломбы
	//ДатаПоверкиСчетчика
	//ДатаУстановкиСчетчика
	//ЕИРЦномерПУ
	//Отключен
	//Коэффициент

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ДатаДобавления,
		|	ТЗ.ДатаРасторженияДоговора,
		|	ТЗ.Наименование,
		|	ТЗ.НомерДоговора,
		|	ТЗ.ОтдельныйВвод,
		|	ТЗ.Площадь,
		|	ТЗ.УчаствуетВМОП,
		|	ТЗ.Код КАК КодДома,
		|	ТЗ.Корпус,
		|	ТЗ.Дом КАК ДомНомер,
		|	ТЗ.ДомНаименование,
		|	ТЗ.Улица,
		|	ТЗ.ТарифКод,
		|	ТЗ.ТарифНаименование,
		|	ТЗ.ПУКод,
		|	ТЗ.ПУНаименование,
		|	ТЗ.ЗаводскойНомер,
		|	ТЗ.ДатаВыпуска,
		|	ТЗ.ТипПрибораУчетаНаименование,
		|	ТЗ.НомерПломбы,
		|	ТЗ.ДатаПоверкиСчетчика,
		|	ТЗ.ДатаУстановкиСчетчика,
		|	ТЗ.ЕИРЦНомерПУ,
		|	ТЗ.Отключен,
		|	ТЗ.Коэффициент,
		|	ТЗ.КодНП
		|ПОМЕСТИТЬ втТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.ДатаДобавления,
		|	втТЗ.ДатаРасторженияДоговора,
		|	втТЗ.Наименование,
		|	втТЗ.НомерДоговора,
		|	втТЗ.ОтдельныйВвод,
		|	втТЗ.Площадь,
		|	втТЗ.УчаствуетВМОП,
		|	втТЗ.КодДома,
		|	втТЗ.Корпус,
		|	втТЗ.ДомНомер,
		|	втТЗ.ДомНаименование,
		|	втТЗ.Улица,
		|	втТЗ.ТарифКод,
		|	втТЗ.ТарифНаименование,
		|	втТЗ.ПУКод,
		|	втТЗ.ПУНаименование,
		|	втТЗ.ЗаводскойНомер,
		|	втТЗ.ДатаВыпуска,
		|	втТЗ.ТипПрибораУчетаНаименование,
		|	втТЗ.НомерПломбы,
		|	втТЗ.ДатаПоверкиСчетчика,
		|	втТЗ.ДатаУстановкиСчетчика,
		|	втТЗ.ЕИРЦНомерПУ,
		|	втТЗ.Отключен,
		|	втТЗ.Коэффициент,
		|	ркУлицы.Ссылка КАК НайденнаяУлица,
		|	втТЗ.КодНП
		|ПОМЕСТИТЬ втУлицы
		|ИЗ
		|	втТЗ КАК втТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркУлицы КАК ркУлицы
		|		ПО втТЗ.Улица = ркУлицы.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втУлицы.ДатаДобавления,
		|	втУлицы.ДатаРасторженияДоговора,
		|	втУлицы.Наименование,
		|	втУлицы.НомерДоговора,
		|	втУлицы.ОтдельныйВвод,
		|	втУлицы.Площадь,
		|	втУлицы.УчаствуетВМОП,
		|	втУлицы.КодДома,
		|	втУлицы.Корпус,
		|	втУлицы.ДомНомер,
		|	втУлицы.ДомНаименование,
		|	втУлицы.Улица,
		|	втУлицы.ТарифКод,
		|	втУлицы.ТарифНаименование,
		|	втУлицы.ПУКод,
		|	втУлицы.ПУНаименование,
		|	втУлицы.ЗаводскойНомер,
		|	втУлицы.ДатаВыпуска,
		|	втУлицы.ТипПрибораУчетаНаименование,
		|	втУлицы.НомерПломбы,
		|	втУлицы.ДатаПоверкиСчетчика,
		|	втУлицы.ДатаУстановкиСчетчика,
		|	втУлицы.ЕИРЦНомерПУ,
		|	втУлицы.Отключен,
		|	втУлицы.Коэффициент,
		|	втУлицы.НайденнаяУлица,
		|	ркДома.Ссылка КАК НайденныйДом,
		|	втУлицы.КодНП
		|ПОМЕСТИТЬ втДома
		|ИЗ
		|	втУлицы КАК втУлицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркДома КАК ркДома
		|		ПО втУлицы.НайденнаяУлица = ркДома.Владелец
		|			И втУлицы.ДомНомер = ркДома.Номер
		|			И втУлицы.Корпус = ркДома.Корпус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДома.ДатаДобавления КАК ДатаДобавления,
		|	втДома.ДатаРасторженияДоговора КАК ДатаРасторженияДоговора,
		|	втДома.Наименование КАК Наименование,
		|	втДома.НомерДоговора КАК НомерДоговора,
		|	втДома.ОтдельныйВвод КАК ОтдельныйВвод,
		|	втДома.Площадь КАК Площадь,
		|	втДома.УчаствуетВМОП КАК УчаствуетВМОП,
		|	втДома.КодДома КАК КодДома,
		|	втДома.Корпус КАК Корпус,
		|	втДома.ДомНомер КАК ДомНомер,
		|	втДома.ДомНаименование КАК ДомНаименование,
		|	втДома.Улица КАК Улица,
		|	втДома.ТарифКод КАК ТарифКод,
		|	втДома.ТарифНаименование КАК ТарифНаименование,
		|	втДома.ПУКод,
		|	втДома.ПУНаименование,
		|	втДома.ЗаводскойНомер,
		|	втДома.ДатаВыпуска,
		|	втДома.ТипПрибораУчетаНаименование,
		|	втДома.НомерПломбы,
		|	втДома.ДатаПоверкиСчетчика,
		|	втДома.ДатаУстановкиСчетчика,
		|	втДома.ЕИРЦНомерПУ,
		|	втДома.Отключен,
		|	втДома.Коэффициент,
		|	втДома.НайденнаяУлица КАК НайденнаяУлица,
		|	втДома.НайденныйДом КАК НайденныйДом,
		|	ркЛицевыеСчетаДополнительныеРеквизиты.Ссылка КАК НайденныйЛС,
		|	втДома.КодНП
		|ПОМЕСТИТЬ втАбоненты
		|ИЗ
		|	втДома КАК втДома
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркЛицевыеСчета.ДополнительныеРеквизиты КАК ркЛицевыеСчетаДополнительныеРеквизиты
		|		ПО втДома.ПУКод = ркЛицевыеСчетаДополнительныеРеквизиты.Значение
		|			И (ркЛицевыеСчетаДополнительныеРеквизиты.Свойство = &СвойствоИсходныйКод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втАбоненты.ДатаДобавления КАК ДатаДобавления,
		|	втАбоненты.ДатаРасторженияДоговора КАК ДатаРасторженияДоговора,
		|	втАбоненты.Наименование КАК Наименование,
		|	втАбоненты.НомерДоговора КАК НомерДоговора,
		|	втАбоненты.ОтдельныйВвод КАК ОтдельныйВвод,
		|	втАбоненты.Площадь КАК Площадь,
		|	втАбоненты.УчаствуетВМОП КАК УчаствуетВМОП,
		|	втАбоненты.КодДома КАК КодДома,
		|	втАбоненты.Корпус КАК Корпус,
		|	втАбоненты.ДомНомер КАК ДомНомер,
		|	втАбоненты.ДомНаименование КАК ДомНаименование,
		|	втАбоненты.Улица КАК Улица,
		|	втАбоненты.ТарифКод КАК ТарифКод,
		|	втАбоненты.ТарифНаименование КАК ТарифНаименование,
		|	втАбоненты.ПУКод,
		|	втАбоненты.ПУНаименование,
		|	втАбоненты.ЗаводскойНомер,
		|	втАбоненты.ДатаВыпуска,
		|	втАбоненты.ТипПрибораУчетаНаименование,
		|	втАбоненты.НомерПломбы,
		|	втАбоненты.ДатаПоверкиСчетчика,
		|	втАбоненты.ДатаУстановкиСчетчика,
		|	втАбоненты.ЕИРЦНомерПУ,
		|	втАбоненты.Отключен,
		|	втАбоненты.Коэффициент,
		|	втАбоненты.НайденнаяУлица КАК НайденнаяУлица,
		|	втАбоненты.НайденныйДом КАК НайденныйДом,
		|	втАбоненты.НайденныйЛС КАК НайденныйЛС,
		|	ркСчетчикиДополнительныеРеквизиты.Ссылка КАК НайденныйСчетчик,
		|	втАбоненты.КодНП КАК КодНП
		|ИЗ
		|	втАбоненты КАК втАбоненты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркСчетчики.ДополнительныеРеквизиты КАК ркСчетчикиДополнительныеРеквизиты
		|		ПО втАбоненты.ПУКод = ркСчетчикиДополнительныеРеквизиты.Значение
		|			И (ркСчетчикиДополнительныеРеквизиты.Свойство = &СвойствоИсходныйКод)
		|ИТОГИ
		|	МАКСИМУМ(ДатаДобавления),
		|	МАКСИМУМ(ДатаРасторженияДоговора),
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(НомерДоговора),
		|	МАКСИМУМ(ОтдельныйВвод),
		|	МАКСИМУМ(Площадь),
		|	МАКСИМУМ(УчаствуетВМОП),
		|	МАКСИМУМ(КодДома),
		|	МАКСИМУМ(Корпус),
		|	МАКСИМУМ(ДомНомер),
		|	МАКСИМУМ(ДомНаименование),
		|	МАКСИМУМ(Улица),
		|	МАКСИМУМ(ТарифКод),
		|	МАКСИМУМ(ТарифНаименование),
		|	МАКСИМУМ(НайденнаяУлица),
		|	МАКСИМУМ(НайденныйДом),
		|	МАКСИМУМ(НайденныйЛС)
		|ПО
		|	КодНП";
		
	Запрос.УстановитьПараметр("ТЗ",НежилыеТЗ);
	Запрос.УстановитьПараметр("СвойствоИсходныйКод",КонстантыОбработки.СвойствоИсходныйКод);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если Счетчик = 0 И НЕ ТранзакцияАктивна Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			
			ДокИзм = Документы.ркИзменениеЗначенийСвойствОбъектов.СоздатьДокумент();
			ДокИзм.Дата = ДатаОткрытия;
			ДокИзм.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокИзм.Организация = Организация;
			ДокИзм.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.НайденнаяУлица) Тогда
			Сообщить("Не найдена улица "+Выборка.Улица + " для помещения "+Выборка.Наименование);
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.НайденныйДом) Тогда
			Сообщить("Не найден дом" + Выборка.ДомНаименование+" для помещения "+Выборка.Наименование);
			//стрДома = Новый Структура("Наименование,Улица,Корпус,Номер,ДатаПостановкиНаУчет,ДатаСнятияСУчета,УК");
			//ЗаполнитьЗначенияСвойств(стрДома,стрДомаТЗ);
			//стрДома.Наименование = стрДомаТЗ.НаименованиеТекст;
			//ДомСсылка = Справочники.ркДома.НайтиПоНаименованию(стрДома.Наименование,Истина);
			//ЭтоНовыйДом = ДомСсылка.Пустая();
			//текДом = ПолучитьДом(стрДома,ДатаОткрытия,КонстантыОбработки.МКДНормы,стрДомаТЗ.ДопРеквизиты.Количество()>0);

			//Продолжить;
		КонецЕсли;
		тАбонент = Выборка.НайденныйЛС;
		Если НЕ ЗначениеЗаполнено(тАбонент) Тогда
			
			НаименованиеГруппыЛицевыхСчетов = Выборка.Улица+", "+Выборка.ДомНомер + ?(ЗначениеЗаполнено(Выборка.Корпус),", "+Выборка.Корпус,"");
			ГруппаЛицевыхСчетов = Справочники.ркЛицевыеСчета.НайтиПоНаименованию(НаименованиеГруппыЛицевыхСчетов,Истина);
			Если ГруппаЛицевыхСчетов.Пустая() Тогда
				ГруппаЛицевыхСчетов = Справочники.ркЛицевыеСчета.СоздатьГруппу();
				ГруппаЛицевыхСчетов.Наименование = НаименованиеГруппыЛицевыхСчетов;
				Если НЕ ЗначениеЗаполнено(ГруппаЛицевыхСчетов.Код) Тогда
					ГруппаЛицевыхСчетов.УстановитьНовыйКод("Гр-");
				КонецЕсли;
				ГруппаЛицевыхСчетов.ОбменДанными.Загрузка = Истина;
				ГруппаЛицевыхСчетов.Записать();
				ГруппаЛицевыхСчетов = ГруппаЛицевыхСчетов.Ссылка;
			КонецЕсли;
			тДом = Выборка.НайденныйДом;
			Если НЕ ЗначениеЗаполнено(тДом) ТОгда
				тНовыйДом = Справочники.ркДома.СоздатьЭлемент();
				тНовыйДом.Наименование = Выборка.ДомНаименование;
				тНовыйДом.Номер = Выборка.ДомНомер;
				тНовыйДом.Корпус = Выборка.Корпус;
				тНовыйДом.Владелец = Выборка.НайденнаяУлица;
				тНовыйДом.УстановитьНовыйКод();
				тНовыйДом.ОбменДанными.Загрузка = Истина;
				
				СтрокаДопРеквизитов = тНовыйДом.ДополнительныеРеквизиты.Добавить();
				СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоИсходныйКод;
				СтрокаДопРеквизитов.Значение = Выборка.КодДома;
				
				тНовыйДом.Записать();
				тДом = тНовыйДом.Ссылка;
			КонецЕсли;
			НовыйАбонент = Справочники.ркЛицевыеСчета.СоздатьЭлемент();
			НовыйАбонент.Наименование = Выборка.Наименование;
			НовыйАбонент.Родитель = ГруппаЛицевыхСчетов;
			НовыйАбонент.Дом = тДом;
			НовыйАбонент.ДатаЗакрытия = Выборка.ДатаРасторженияДоговора;
			НовыйАбонент.ДатаОткрытия = Выборка.ДатаДобавления;
			НовыйАбонент.НежилоеПомещение = Истина;
			НовоеПомещение = Справочники.ркПомещения.СоздатьЭлемент();
			НовоеПомещение.Наименование = Выборка.Наименование;
			НовоеПомещение.Тип = КонстантыОбработки.ТипПомещенияКвартира;
			НовоеПомещение.Владелец = тДом;
			НовоеПомещение.Номер = "0";
			НовоеПомещение.УстановитьНовыйКод();
			НовоеПомещение.Записать();
			НовыйАбонент.Помещение = НовоеПомещение.Ссылка;
			
			СтрокаДопРеквизитов = НовыйАбонент.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоИсходныйКод;
			СтрокаДопРеквизитов.Значение = Выборка.КодНП;
			
			СтрокаДопРеквизитов = НовыйАбонент.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоНомерДоговора;
			СтрокаДопРеквизитов.Значение = Выборка.НомерДоговора;
			
			СтрокаДопРеквизитов = НовыйАбонент.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоОтдельныйВвод;
			СтрокаДопРеквизитов.Значение = Выборка.ОтдельныйВвод;
			
			//СтрокаДопРеквизитов = НовыйАбонент.ДополнительныеРеквизиты.Добавить();
			//СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоПлощадь;
			//СтрокаДопРеквизитов.Значение = Выборка.Площадь;
			текДатаИзменения = НачалоГода(ДатаОткрытия);


			СтрокаДопРеквизитов = НовыйАбонент.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизитов.Свойство = КонстантыОбработки.СвойствоУчаствуетВМОП;
			СтрокаДопРеквизитов.Значение = Выборка.УчаствуетВМОП;
			НовыйАбонент.УстановитьНовыйКод();
			НовыйАбонент.Записать();
			тАбонент = НовыйАбонент.Ссылка;
			
			СтруктураПоиска = Новый Структура("НачалоДействия,Объект,Свойство", текДатаИзменения,НовыйАбонент.Ссылка,КонстантыОбработки.СвойствоПлощадь);
			НайденныеСтроки = докИзм.Состав.НайтиСтроки(СтруктураПоиска);
			НоваяСтрокаДок = Неопределено;
			Если НайденныеСтроки.Количество()>0 Тогда
				НоваяСтрокаДок = НайденныеСтроки[0];
			Иначе
				НоваяСтрокаДок = докИзм.Состав.Добавить();
			КонецЕсли;
			НоваяСтрокаДок.Объект = НовыйАбонент.Ссылка;                                                 
			НоваяСтрокаДок.НачалоДействия = текДатаИзменения;
			НоваяСтрокаДок.Свойство = КонстантыОбработки.СвойствоПлощадь;
			НоваяСтрокаДок.Значение = Выборка.Площадь;					

		КонецЕсли;
		ВыборкаСчетчики = Выборка.Выбрать();
		
		Пока ВыборкаСчетчики.Следующий() Цикл
			//проверить вдруг уже есть
			Если НЕ ЗначениеЗаполнено(ВыборкаСчетчики.НайденныйСчетчик) Тогда
				//создавать счетчик
				//если есть информация о нем
				Если НЕ ЗначениеЗаполнено(ВыборкаСчетчики.ПУКод) Тогда
					Продолжить;
				КонецЕсли;
				НовыйСчетчик = Справочники.ркСчетчики.СоздатьЭлемент();
				НовыйСчетчик.Наименование = ВыборкаСчетчики.ПУНаименование;
				НовыйСчетчик.Номер = ВыборкаСчетчики.ЗаводскойНомер;				
				НовыйСчетчик.Владелец = тАбонент.Помещение;
				НовыйСчетчик.ДатаВыпуска = ВыборкаСчетчики.ДатаВыпуска;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоТипПрибораУчета;
				СтрокаТЧ.Значение = ВыборкаСчетчики.ТипПрибораУчетаНаименование;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоНомерПломбы;
				СтрокаТЧ.Значение = ВыборкаСчетчики.НомерПломбы;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоДатаПоверки;
				СтрокаТЧ.Значение = ВыборкаСчетчики.ДатаПоверкиСчетчика;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоДатаУстановки;
				СтрокаТЧ.Значение = ВыборкаСчетчики.ДатаУстановкиСчетчика;

				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоЕИРЦНомерПУ;
				СтрокаТЧ.Значение = ВыборкаСчетчики.ЕИРЦНомерПУ;

				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоОтключен;
				СтрокаТЧ.Значение = ВыборкаСчетчики.Отключен;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоКоэффициент;
				СтрокаТЧ.Значение = ВыборкаСчетчики.Коэффициент;
				
				СтрокаТЧ = НовыйСчетчик.ДополнительныеРеквизиты.Добавить();
				СтрокаТЧ.Свойство = КонстантыОбработки.СвойствоИсходныйКод;
				СтрокаТЧ.Значение = ВыборкаСчетчики.ПУКод;
				
				СтрокаТЧ = НовыйСчетчик.ВидыРасчетов.Добавить();
				СтрокаТЧ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
				СтрокаТЧ.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
				СтрокаТЧ.ЕдиницаРасчетаНормативногоКоличества = КонстантыОбработки.ЕдиницаКоличествоПроживающих;
				
				НовыйСчетчик.Уровень = Справочники.ркУровниСчетчиков.Индивидуальный;
				
				НовыйСчетчик.УстановитьНовыйКод();
				НовыйСчетчик.Записать();

			КонецЕсли;
		КонецЦикла;
		Счетчик = Счетчик + 1;
		Если Счетчик >= 1000 И ТранзакцияАктивна Тогда
			
			Если ДокИзм.Состав.Количество() > 0 Тогда
				ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
				ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТранзакцияАктивна Тогда
		Если ДокИзм.Состав.Количество() > 0 Тогда
			ДокИзм.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокИзм.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНачисленияНежилых(Команда)
	
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ЗагрузитьНачисленияНежилыхНаСервере(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНачисленияНежилыхНаСервере(пАдрес)
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	НачисленияНежилыхТЗ = ЗначениеИзФайла(ФайлПриемник);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.НежилоеПомещениеКод,
		|	ТЗ.НежилоеПомещениеНаименование,
		|	ТЗ.Объем,
		|	ТЗ.Период,
		|	ТЗ.ПриборУчетаКод,
		|	ТЗ.ПриборУчетаНаименование
		|ПОМЕСТИТЬ втТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.НежилоеПомещениеКод,
		|	втТЗ.НежилоеПомещениеНаименование,
		|	втТЗ.Объем,
		|	втТЗ.Период,
		|	втТЗ.ПриборУчетаКод,
		|	втТЗ.ПриборУчетаНаименование,
		|	ркЛицевыеСчетаДополнительныеРеквизиты.Ссылка КАК НайденныйАбонент,
		|	ркСчетчикиДополнительныеРеквизиты.Ссылка КАК НайденныйПУ,
		|	ркЛицевыеСчетаДополнительныеРеквизиты.Ссылка.Дом.УК
		|ИЗ
		|	втТЗ КАК втТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркСчетчики.ДополнительныеРеквизиты КАК ркСчетчикиДополнительныеРеквизиты
		|		ПО втТЗ.ПриборУчетаКод = ркСчетчикиДополнительныеРеквизиты.Значение
		|			И (ркСчетчикиДополнительныеРеквизиты.Свойство = &СвойствоИсходныйКод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркЛицевыеСчета.ДополнительныеРеквизиты КАК ркЛицевыеСчетаДополнительныеРеквизиты
		|		ПО втТЗ.НежилоеПомещениеКод = ркЛицевыеСчетаДополнительныеРеквизиты.Значение
		|			И (ркЛицевыеСчетаДополнительныеРеквизиты.Свойство = &СвойствоИсходныйКод)";
		
	Запрос.УстановитьПараметр("ТЗ",НачисленияНежилыхТЗ);
	Запрос.УстановитьПараметр("СвойствоИсходныйКод",КонстантыОбработки.СвойствоИсходныйКод);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	ДокНачислениеГр = Документы.ркНачисления.СоздатьДокумент();
	ДокНачислениеГр.Дата = ДобавитьМесяц(ДатаОткрытия,-1);
	ДокНачислениеГр.Организация = Организация;
	ДокНачислениеГр.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокНачислениеГр.НаОбщедомовыеНужды = Истина;
	ДокНачислениеГр.Комментарий = "Не проводить: Загрузка данных " + ТекущаяДата();
	ДокНачислениеГр.Проведен = Истина;
	ДокНачислениеГр.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
	ДокНачислениеГр.Записать(РежимЗаписиДокумента.Запись);
	
	НЗгр = РегистрыНакопления.ркНачисления.СоздатьНаборЗаписей();
	НЗгр.Отбор.Регистратор.Установить(ДокНачислениеГр.Ссылка);
	НЗгр.Прочитать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НайденныйАбонент) Тогда
			Сообщить("не найден абонент " + ВыборкаДетальныеЗаписи.НежилоеПомещениеНаименование);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПриборУчетаНаименование) И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НайденныйПУ) Тогда
			Сообщить("не найден пу"+ВыборкаДетальныеЗаписи.ПриборУчетаНаименование);
			Продолжить;
		КонецЕсли;
		
		НоваяЗаписьНачислений = НЗгр.Добавить();
		НоваяЗаписьНачислений.Регистратор = ДокНачислениеГр;
		НоваяЗаписьНачислений.ВидНачисления = Перечисления.ркВидыНачислений.ЕжемесячныеНачисления;
		НоваяЗаписьНачислений.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
		НоваяЗаписьНачислений.КоличествоВПределахНормы = ВыборкаДетальныеЗаписи.Объем;
		НоваяЗаписьНачислений.ЛицевойСчет = ВыборкаДетальныеЗаписи.НайденныйАбонент;
		НоваяЗаписьНачислений.НаОбщедомовыеНужды = Истина;
		НоваяЗаписьНачислений.Период = ВыборкаДетальныеЗаписи.Период;
		НоваяЗаписьНачислений.ПериодЗадолженности = ВыборкаДетальныеЗаписи.Период;
		НоваяЗаписьНачислений.Поставщик = КонстантыОбработки.Поставщик;
		НоваяЗаписьНачислений.ТипОперации = Перечисления.ркТипыОперацийНачисления.НачисленияТекущегоПериода;
		НоваяЗаписьНачислений.УК = ВыборкаДетальныеЗаписи.ДомУК;
		НоваяЗаписьНачислений.ВидНормы = ГрВидНормы;
		НоваяЗаписьНачислений.ВидТарифа = ГрВидТарифа;		
		НоваяЗаписьНачислений.ЕдиницаИзмерения = грВидТарифа.ЕдиницыУчета;		
		НоваяЗаписьНачислений.ЕдиницаРасчета = грЕдиницаРасчета;
		
	КонецЦикла;
	НЗгр.Записать(Истина);
	Сообщить("Создан документ "+ДокНачислениеГр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСвойстваСчетчиков(Команда)
	
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ЗагрузитьСвойстваСчетчиковНаСервере(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСвойстваСчетчиковНаСервере(пАдрес)
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	ПУТЗ = ЗначениеИзФайла(ФайлПриемник);
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ВидЭнергоназначений,
		|	ТЗ.Владелец,
		|	ТЗ.ЗаводскойНомер,
		|	ТЗ.Код,
		|	ТЗ.Наименование,
		|	ТЗ.ТипВладельца,
		|	ТЗ.ТипПрибораУчета,
		|	ТЗ.ВладелецКод
		|ПОМЕСТИТЬ втТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.ВидЭнергоназначений,
		|	втТЗ.Владелец,
		|	втТЗ.ЗаводскойНомер,
		|	втТЗ.Код,
		|	втТЗ.Наименование,
		|	втТЗ.ТипВладельца,
		|	втТЗ.ТипПрибораУчета,
		|	втТЗ.ВладелецКод,
		|	ркЛицевыеСчета.Ссылка КАК НайденныйЛС
		|ПОМЕСТИТЬ втЛС
		|ИЗ
		|	втТЗ КАК втТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|		ПО втТЗ.Владелец = ркЛицевыеСчета.Наименование
		|ГДЕ
		|	(втТЗ.ТипВладельца = ""Абонент""
		|			ИЛИ втТЗ.ТипВладельца = ""НП"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛС.ВидЭнергоназначений,
		|	втЛС.Владелец,
		|	втЛС.ЗаводскойНомер,
		|	втЛС.Код,
		|	втЛС.Наименование,
		|	втЛС.ТипВладельца,
		|	втЛС.ТипПрибораУчета,
		|	втЛС.ВладелецКод,
		|	МИНИМУМ(ркСчетчики.Ссылка) КАК НайденныйСчетчик
		|ПОМЕСТИТЬ втСчетчикиЛС
		|ИЗ
		|	втЛС КАК втЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ркСчетчики КАК ркСчетчики
		|		ПО втЛС.ЗаводскойНомер = ркСчетчики.Номер
		|			И втЛС.НайденныйЛС.Помещение = ркСчетчики.Владелец
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛС.ТипПрибораУчета,
		|	втЛС.ВладелецКод,
		|	втЛС.ВидЭнергоназначений,
		|	втЛС.Владелец,
		|	втЛС.ЗаводскойНомер,
		|	втЛС.Код,
		|	втЛС.Наименование,
		|	втЛС.ТипВладельца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.ВидЭнергоназначений,
		|	втТЗ.Владелец,
		|	втТЗ.ЗаводскойНомер,
		|	втТЗ.Код,
		|	втТЗ.Наименование,
		|	втТЗ.ТипВладельца,
		|	втТЗ.ТипПрибораУчета,
		|	втТЗ.ВладелецКод,
		|	МИНИМУМ(ркСчетчики.Ссылка) КАК НайденныйСчетчик
		|ПОМЕСТИТЬ втСчетчикиДом
		|ИЗ
		|	втТЗ КАК втТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ркСчетчики КАК ркСчетчики
		|		ПО (ркСчетчики.Владелец ССЫЛКА Справочник.ркДома)
		|			И втТЗ.ЗаводскойНомер = ркСчетчики.Номер
		|ГДЕ
		|	втТЗ.ТипВладельца = ""Дом""
		|
		|СГРУППИРОВАТЬ ПО
		|	втТЗ.ТипВладельца,
		|	втТЗ.ВладелецКод,
		|	втТЗ.Наименование,
		|	втТЗ.ТипПрибораУчета,
		|	втТЗ.Код,
		|	втТЗ.ЗаводскойНомер,
		|	втТЗ.ВидЭнергоназначений,
		|	втТЗ.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСчетчикиЛС.ВидЭнергоназначений,
		|	втСчетчикиЛС.Владелец,
		|	втСчетчикиЛС.ЗаводскойНомер,
		|	втСчетчикиЛС.Код,
		|	втСчетчикиЛС.Наименование,
		|	втСчетчикиЛС.ТипВладельца,
		|	втСчетчикиЛС.ТипПрибораУчета,
		|	втСчетчикиЛС.ВладелецКод,
		|	втСчетчикиЛС.НайденныйСчетчик
		|ИЗ
		|	втСчетчикиЛС КАК втСчетчикиЛС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втСчетчикиДом.ВидЭнергоназначений,
		|	втСчетчикиДом.Владелец,
		|	втСчетчикиДом.ЗаводскойНомер,
		|	втСчетчикиДом.Код,
		|	втСчетчикиДом.Наименование,
		|	втСчетчикиДом.ТипВладельца,
		|	втСчетчикиДом.ТипПрибораУчета,
		|	втСчетчикиДом.ВладелецКод,
		|	втСчетчикиДом.НайденныйСчетчик
		|ИЗ
		|	втСчетчикиДом КАК втСчетчикиДом";
		
	Запрос.УстановитьПараметр("ТЗ",ПУТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		
		тСчетчик = Выборка.НайденныйСчетчик.ПолучитьОбъект();

		СтруктураПоиска = Новый Структура("Свойство", КонстантыОбработки.СвойствоТипПрибораУчета);
		НайденныеСтроки = тСчетчик.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			стрДополнительныеРеквизиты = НайденныеСтроки[0];
		Иначе
			стрДополнительныеРеквизиты = тСчетчик.ДополнительныеРеквизиты.Добавить();
		КонецЕсли;
		стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоТипПрибораУчета;
		стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(стрДополнительныеРеквизиты.Свойство,Выборка.ТипПрибораУчета);

		СтруктураПоиска = Новый Структура("Свойство", КонстантыОбработки.СвойствоВидЭнергоназначений);
		НайденныеСтроки = тСчетчик.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			стрДополнительныеРеквизиты = НайденныеСтроки[0];
		Иначе
			стрДополнительныеРеквизиты = тСчетчик.ДополнительныеРеквизиты.Добавить();
		КонецЕсли;
		стрДополнительныеРеквизиты.Свойство = КонстантыОбработки.СвойствоВидЭнергоназначений;
		стрДополнительныеРеквизиты.Значение = ПолучитьЗначениеСвойства(стрДополнительныеРеквизиты.Свойство,Выборка.ВидЭнергоназначений);
		
		тСчетчик.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНормыОДН(Команда)
	Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ЗагрузитьНормыОДННаСервере(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНормыОДННаСервере(пАдрес)
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);
	
	ТЗ = ЗначениеИзФайла(ФайлПриемник);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Период,
		|	ТЗ.Этаж,
		|	ТЗ.Значение
		|ПОМЕСТИТЬ втТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.Период,
		|	втТЗ.Этаж,
		|	втТЗ.Значение,
		|	ркДомаДополнительныеРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ркДома.ДополнительныеРеквизиты КАК ркДомаДополнительныеРеквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТЗ КАК втТЗ
		|		ПО ркДомаДополнительныеРеквизиты.Значение = втТЗ.Этаж
		|ГДЕ
		|	ркДомаДополнительныеРеквизиты.Свойство = &СвойствоЭтаж";
		
	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Запрос.УстановитьПараметр("СвойствоЭтаж",КонстантыОбработки.СвойствоЭтажность);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДом = РезультатЗапроса.Выбрать();
	
	Счетчик = 0;
	Док = Неопределено;
	
	Пока ВыборкаДом.Следующий() Цикл
		
		Если Счетчик = 0 Тогда
			Док = Документы.рцПараметрыРасчетаОДН.СоздатьДокумент();
			Док.Дата = ДатаОткрытия;
			Док.Комментарий = "Загрузка данных "+ТекущаяДата();
			Док.Организация = Организация;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.УстановитьНовыйНомер();
		КонецЕсли;
		
		тДом = ВыборкаДом.Ссылка;
		
		СтруктураПоиска = Новый Структура("Дом,НачалоДействия", тДом,ВыборкаДом.Период);
		НайденныеСтроки = Док.Состав.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрокаТЧ = НайденныеСтроки[0];
		Иначе
			НоваяСтрокаТЧ = Док.Состав.Добавить();
		КонецЕсли;		
		
		НоваяСтрокаТЧ.Дом = тДом;
		НоваяСтрокаТЧ.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроЭнергия;
		НоваяСтрокаТЧ.ЗначениеНормы = ВыборкаДом.Значение;
		НоваяСтрокаТЧ.ОграничиватьПоказанияОДПУ = Истина;
		НоваяСтрокаТЧ.НачалоДействия = ВыборкаДом.Период;
		НоваяСтрокаТЧ.ХарактеристикаПлощадьМОП = КонстантыОбработки.СвойствоПлощадьМОП;
		
		Счетчик = Счетчик+1;
		Если Счетчик > 1000 Тогда
			Счетчик = 0;
			Док.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	Если Счетчик > 0 Тогда
		Док.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьПоказания(Команда)
	
	СписокФайлов = НайтиФайлы(КаталогДанных,"ТЗДома*.dat");
	Для Каждого тФайл Из СписокФайлов Цикл
		Сообщить("Начало чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
		ФайлИсточник = тФайл.ПолноеИмя;
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));	
		ДогрузитьПоказанияСервер(Адрес);
		Сообщить("Окончение чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
	КонецЦикла;

КонецПроцедуры

&НаСервере	
Процедура ДогрузитьПоказанияСервер(пАдрес)
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);	
	
	ДомаТЗ = ЗначениеИзФайла(ФайлПриемник);
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	СтатусПроживает = Константы.ркСтатусПроживает.Получить();
	
	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	ДокИзм = Неопределено;
	ДокИзмГПУ = Неопределено;
	ДокПроживающие = Неопределено;
	ДокИзмИПУ = Неопределено;
	//ДокПоказанияСчетчиков = Неопределено;
	ДокОплата = Неопределено;
	ДокСоставНачислений = Неопределено;
	//ДокПоказанийГПУ = Неопределено;
	ТЗПоказаний = ПолучитьТЗПоказаний();
	Для Каждого стрДомаТЗ Из ДомаТЗ Цикл
		//Наименование
		//Улица
		//Номер
		//Корпус
		//ДатаПостановкиНаУчет
		//ДатаСнятияСУчета
		//ОДПУ (ТЗ)
		//Доп.реквизиты дома (ТЗ)
		//Лицевые счета (ТЗ)
		
		
		стрДома = Новый Структура("Наименование,Улица,Корпус,Номер,ДатаПостановкиНаУчет,ДатаСнятияСУчета,УК");
		ЗаполнитьЗначенияСвойств(стрДома,стрДомаТЗ);
		стрДома.Наименование = стрДомаТЗ.НаименованиеТекст;
		текДом = Справочники.ркДома.НайтиПоНаименованию(стрДома.Наименование,Истина);
		
		Если текДом.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого стрЛицевыеСчетаТЗ Из стрДомаТЗ.ЛС Цикл
			
			//НомерЛС
			//Наименование
			//ПомещениеНаименование
			//ПомещениеНомер
			//ПомещениеЖилоеМуниципальное
			//ОтветственныйКвартиросъемщик
			//НежилоеПомещение
			//НевыясненнаяСумма
			//ЖилоеМуниципальное
			//ОтветственныйКвартиросъемщикФамилия
			//ОтветственныйКвартиросъемщикИмя
			//ОтветственныйКвартиросъемщикОтчество
			//ОтветственныйКвартиросъемщикДатаРождения
			//ОтветственныйКвартиросъемщикПол
			//ДатаОткрытия
			//ДатаЗакрытия
			//ДополнительныеРеквизиты (ТЗ)
			//ОбъектыРасчета (ТЗ)
			//Счетчики (ТЗ)
			//Сальдо (ТЗ)
			//Нормативы (ТЗ)
			
			//текДОм, ГруппаЛицевыхСчетов
			
			ПомещениеСсылка = Справочники.ркПомещения.НайтиПоНаименованию(стрЛицевыеСчетаТЗ.ПомещениеНаименование,Истина,,текДом);
			Если ПомещениеСсылка.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			текЛицевойСчет = Справочники.ркЛицевыеСчета.НайтиПоКоду(стрЛицевыеСчетаТЗ.НомерЛС);
			Если текЛицевойСчет.Пустая() ИЛИ текЛицевойСчет.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСчетчик = Ложь;
			МассивСчетчиков = Новый Массив;
			Для Каждого стрСчетчики Из стрЛицевыеСчетаТЗ.Счетчики Цикл
				
				
				//Наименование
				//ДатаВыпуска
				//Номер
				//КлассТочности
				//НачальныеПоказания
				//ДатаВключения //в документ
				//ДатаПоверки
				//ДатаПроверки
				//МежповерочныйИнтервал
				//ПоказанияСчетчика (ТЗ)
				
				текСчетчик = Справочники.ркСчетчики.НайтиПоРеквизиту("Номер",стрСчетчики.Номер,,текЛицевойСЧет.Помещение);
				Если текСчетчик.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				Если МассивСчетчиков.Найти(текСчетчик) = Неопределено Тогда
					МассивСчетчиков.Добавить(текСчетчик);
				Иначе
					Продолжить;
				КонецЕсли;
				Для Каждого стрПоказание Из стрСчетчики.ПоказанияСчетчика Цикл
					
					//ВидПоказаний
					//МетодРасчета
					//НачальноеПоказание
					//КонечноеПоказание
					//Количество
					//ДатаПоказания
					//ДатаНачалаПериодаПоказаний
					//ДатаКонцаПериодаПоказаний
					
					//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(стрПоказание.ВидПоказаний,Истина);
					//Если ВидПоказанийСпр.Пустая() Тогда
					//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
					//	НовыйВидПоказаний.Наименование = стрПоказание.ВидПоказаний;
					//	НовыйВидПоказаний.УстановитьНовыйКод();
					//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
					//	НовыйВидПоказаний.Записать();
					//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
					//КонецЕсли;
					Если НачалоМесяца(ДатаОграничения) <> НачалоМесяца(стрПоказание.ДатаНачалаПериодаПоказаний) Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрокаТЗ = ТЗПоказаний.Добавить();
					НоваяСтрокаТЗ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
					НоваяСтрокаТЗ.ДатаНачала = стрПоказание.ДатаНачалаПериодаПоказаний;
					НоваяСтрокаТЗ.ДатаОкончания = стрПоказание.ДатаКонцаПериодаПоказаний;
					НоваяСтрокаТЗ.Дом = текДом;
					НоваяСтрокаТЗ.Количество = стрПоказание.КонечноеПоказание - стрПоказание.НачальноеПоказание;
					НоваяСтрокаТЗ.ЛицевойСчет = текЛицевойСчет;
					НоваяСтрокаТЗ.НачальноеКоличество = стрПоказание.НачальноеПоказание;
					НоваяСтрокаТЗ.КонечныеПоказания = стрПоказание.КонечноеПоказание;
					НоваяСтрокаТЗ.ПериодДействия = НачалоМесяца(стрПоказание.ДатаНачалаПериодаПоказаний);
					НоваяСтрокаТЗ.Помещение = ПомещениеСсылка;
					НоваяСтрокаТЗ.Счетчик = текСчетчик;
					Если НачалоМесяца(стрСчетчики.ДатаУстановки) = НачалоМесяца(НоваяСтрокаТЗ.ДатаНачала) ИЛИ НачалоМесяца(стрСчетчики.Период) = НачалоМесяца(НоваяСтрокаТЗ.ДатаНачала) И стрСчетчики.Действует Тогда
						НоваяСтрокаТЗ.НачальноеКоличество = НоваяСтрокаТЗ.КонечныеПоказания;
						НоваяСтрокаТЗ.Количество = 0;
						НоваяСтрокаТЗ.Сброс = Истина;
					КонецЕсли;

				КонецЦикла
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДоЗаписатьПоказания(ТЗПоказаний,КонстантыОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ДоЗаписатьПоказания(пТЗ,КонстантыОбработки)
	
	пТЗ.Сортировать("ПериодДействия Возр,Счетчик Возр");
	ДокПоказанияСчетчиков = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ВидПоказаний,
		|	ТЗ.ДатаНачала,
		|	ТЗ.ДатаОкончания,
		|	ТЗ.Дом,
		|	ТЗ.Количество,
		|	ТЗ.ЛицевойСчет,
		|	ТЗ.НачальноеКоличество,
		|	ТЗ.КонечныеПоказания,
		|	ТЗ.ПериодДействия,
		|	ТЗ.Помещение,
		|	ТЗ.Счетчик,
		|	ТЗ.Сброс
		|ПОМЕСТИТЬ втТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|ГДЕ
		|	ТЗ.ПериодДействия = &ДатаЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ.ВидПоказаний,
		|	втТЗ.ДатаНачала,
		|	втТЗ.ДатаОкончания,
		|	втТЗ.Дом,
		|	втТЗ.Количество,
		|	втТЗ.ЛицевойСчет,
		|	втТЗ.НачальноеКоличество,
		|	втТЗ.КонечныеПоказания,
		|	втТЗ.ПериодДействия,
		|	втТЗ.Помещение,
		|	втТЗ.Счетчик,
		|	втТЗ.Сброс
		|ПОМЕСТИТЬ втТЗ2
		|ИЗ
		|	втТЗ КАК втТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рцПоказанияСчетчиков КАК рцПоказанияСчетчиков
		|		ПО втТЗ.Счетчик = рцПоказанияСчетчиков.Счетчик
		|			И втТЗ.ПериодДействия = рцПоказанияСчетчиков.Период
		|ГДЕ
		|	рцПоказанияСчетчиков.Счетчик ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЗ2.ДатаНачала,
		|	втТЗ2.ДатаОкончания,
		|	втТЗ2.Дом,
		|	втТЗ2.ЛицевойСчет,
		|	МАКСИМУМ(втТЗ2.КонечныеПоказания) КАК КонечныеПоказания,
		|	втТЗ2.ПериодДействия,
		|	втТЗ2.Помещение,
		|	втТЗ2.Счетчик,
		|	втТЗ2.ВидПоказаний,
		|	МАКСИМУМ(втТЗ2.Сброс) КАК Сброс
		|ПОМЕСТИТЬ втМакс
		|ИЗ
		|	втТЗ2 КАК втТЗ2
		|
		|СГРУППИРОВАТЬ ПО
		|	втТЗ2.Помещение,
		|	втТЗ2.ПериодДействия,
		|	втТЗ2.ДатаОкончания,
		|	втТЗ2.ЛицевойСчет,
		|	втТЗ2.Счетчик,
		|	втТЗ2.ДатаНачала,
		|	втТЗ2.Дом,
		|	втТЗ2.ВидПоказаний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рцПоказанияСчетчиковСрезПоследних.Счетчик,
		|	рцПоказанияСчетчиковСрезПоследних.НачальныеПоказания + рцПоказанияСчетчиковСрезПоследних.Количество КАК НачальныеПоказания,
		|	рцПоказанияСчетчиковСрезПоследних.Период
		|ПОМЕСТИТЬ втСрезПоказаний
		|ИЗ
		|	РегистрСведений.рцПоказанияСчетчиков.СрезПоследних(&ДатаЗагрузки, ) КАК рцПоказанияСчетчиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСрезПоказаний.Счетчик,
		|	МАКСИМУМ(втСрезПоказаний.Период) КАК Период
		|ПОМЕСТИТЬ втСрезМаксПериод
		|ИЗ
		|	втСрезПоказаний КАК втСрезПоказаний
		|
		|СГРУППИРОВАТЬ ПО
		|	втСрезПоказаний.Счетчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСрезПоказаний.Счетчик,
		|	МАКСИМУМ(втСрезПоказаний.НачальныеПоказания) КАК НачальныеПоказания,
		|	втСрезПоказаний.Период
		|ПОМЕСТИТЬ втСрезМаксПоказания
		|ИЗ
		|	втСрезМаксПериод КАК втСрезМаксПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСрезПоказаний КАК втСрезПоказаний
		|		ПО втСрезМаксПериод.Счетчик = втСрезПоказаний.Счетчик
		|			И втСрезМаксПериод.Период = втСрезПоказаний.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	втСрезПоказаний.Счетчик,
		|	втСрезПоказаний.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМакс.ДатаНачала,
		|	втМакс.ДатаОкончания,
		|	втМакс.Дом,
		|	втМакс.ЛицевойСчет,
		|	втМакс.КонечныеПоказания,
		|	втМакс.ПериодДействия,
		|	втМакс.Помещение,
		|	втМакс.Счетчик,
		|	втМакс.ВидПоказаний,
		|	ВЫБОР
		|		КОГДА втМакс.Сброс
		|			ТОГДА втМакс.КонечныеПоказания
		|		КОГДА втСрезМаксПоказания.НачальныеПоказания ЕСТЬ NULL 
		|			ТОГДА втМакс.КонечныеПоказания
		|		ИНАЧЕ втСрезМаксПоказания.НачальныеПоказания
		|	КОНЕЦ КАК НачальноеКоличество
		|ИЗ
		|	втМакс КАК втМакс
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСрезМаксПоказания КАК втСрезМаксПоказания
		|		ПО втМакс.Счетчик = втСрезМаксПоказания.Счетчик";
		
	Запрос.УстановитьПараметр("ДатаЗагрузки", ДатаОграничения);
	Запрос.УстановитьПараметр("ТЗ",пТЗ);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	ТранзакцияАктивна = Ложь;
	Счетчик = 0;
	
	//Для Каждого СтрокаТЗ ИЗ пТЗ Цикл
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТранзакцияАктивна И Счетчик = 1000 Тогда
			ДокПоказанияСчетчиков.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанияСчетчиков.Записать(РежимЗаписиДокумента.Проведение);			
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если НЕ ТранзакцияАктивна Тогда
			
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ДокПоказанияСчетчиков = Документы.ркПоказанияСчетчиков.СоздатьДокумент();
			ДокПоказанияСчетчиков.Дата = КонецМесяца(ВыборкаДетальныеЗаписи.ПериодДействия);
			ДокПоказанияСчетчиков.Комментарий = "Загрузка данных "+ТекущаяДата();
			ДокПоказанияСчетчиков.Организация = Организация;
			ДокПоказанияСчетчиков.Ответственный = ПараметрыСеанса.ТекущийПользователь;			
			ДокПоказанияСчетчиков.ТипОперации = Перечисления.ркТипыОперацийПоказанийСчетчиков.ПоказанияЗаПериод;
			ДокПоказанияСчетчиков.ИсточникПоказаний = Перечисления.рцИсточникПоказанийИПУ.ИсторияПоказаний;
			
		КонецЕсли;
		
		НоваяСтрокаТЧ = ДокПоказанияСчетчиков.СоставРаспределенныхПоказаний.Добавить();
		НоваяСтрокаТЧ.ВидНачисления = Перечисления.ркВидыНачислений.ЕжемесячныеНачисления;
		НоваяСтрокаТЧ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
		НоваяСтрокаТЧ.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;
		НоваяСтрокаТЧ.ДатаНачала = ВыборкаДетальныеЗаписи.ДатаНачала;
		НоваяСтрокаТЧ.ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;
		НоваяСтрокаТЧ.Делитель = 1;
		НоваяСтрокаТЧ.Дом = ВыборкаДетальныеЗаписи.Дом;
		НоваяСтрокаТЧ.ЕдиницаИзмерения = КонстантыОбработки.Квтч;
		//НоваяСтрокаТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
		НоваяСтрокаТЧ.Количество = ВыборкаДетальныеЗаписи.КонечныеПоказания - ВыборкаДетальныеЗаписи.НачальноеКоличество;
		НоваяСтрокаТЧ.ЛицевойСчет = ВыборкаДетальныеЗаписи.ЛицевойСчет;
		НоваяСтрокаТЧ.НачальноеКоличество = ВыборкаДетальныеЗаписи.НачальноеКоличество;
		НоваяСтрокаТЧ.ПериодДействия = ВыборкаДетальныеЗаписи.ПериодДействия;
		НоваяСтрокаТЧ.Помещение = ВыборкаДетальныеЗаписи.Помещение;
		НоваяСтрокаТЧ.Счетчик = ВыборкаДетальныеЗаписи.Счетчик;
		НоваяСтрокаТЧ.ТипОперации = Перечисления.ркТипыОперацийНачисления.НачисленияТекущегоПериода;
		НоваяСтрокаТЧ.Уровень = Справочники.ркУровниСчетчиков.Индивидуальный;
		
		НоваяСтрокаТЧСостав = ДокПоказанияСчетчиков.Состав.Добавить();
		НоваяСтрокаТЧСостав.ВидНачисления = НоваяСтрокаТЧ.ВидНачисления;
		НоваяСтрокаТЧСостав.ВидПоказаний = НоваяСтрокаТЧ.ВидПоказаний;
		НоваяСтрокаТЧСостав.ДатаНачалаПоказаний = НоваяСтрокаТЧ.ДатаНачала;
		НоваяСтрокаТЧСостав.ДатаОкончанияПоказаний = НоваяСтрокаТЧ.ДатаОкончания;
		НоваяСтрокаТЧСостав.Дом = НоваяСтрокаТЧ.Дом;
		НоваяСтрокаТЧСостав.Количество = НоваяСтрокаТЧ.Количество;
		НоваяСтрокаТЧСостав.КонечныеПоказания = ВыборкаДетальныеЗаписи.КонечныеПоказания;
		НоваяСтрокаТЧСостав.ЛицевойСчет = НоваяСтрокаТЧ.ЛицевойСчет;
		НоваяСтрокаТЧСостав.НачальныеПоказания = НоваяСтрокаТЧ.НачальноеКоличество;
		НоваяСтрокаТЧСостав.Помещение = НоваяСтрокаТЧ.Помещение;
		НоваяСтрокаТЧСостав.Счетчик = НоваяСтрокаТЧ.Счетчик;
		
		Счетчик = Счетчик+1;
	КонецЦикла;
	Если ТранзакцияАктивна Тогда
		Если ДокПоказанияСчетчиков <> Неопределено Тогда
			ДокПоказанияСчетчиков.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанияСчетчиков.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ЗаписатьПоказания()

&НаКлиенте
Процедура ДогрузитьОплаты(Команда)
			Сообщить("Начало чтения из файла: " +ТекущаяДатаСеансаНаСервере());
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "(*.dat)|*.dat"; 
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
		
		
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	
	ДогрузитьОплатыСервер(Адрес);
	
	Сообщить("Окончение чтения из файла: " +ТекущаяДатаСеансаНаСервере());


КонецПроцедуры

&НаСервере
Процедура ДогрузитьОплатыСервер(пАдрес)
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);	
	
	ТЗ = ЗначениеИзФайла(ФайлПриемник);
	ТЗ.Сортировать("Период Возр");
	ПредМесяц = НачалоМесяца(ТЗ[0].Период);
	
	ДокОплата = Неопределено;
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		Если ТранзакцияАктивна И (Счетчик = 1000 ИЛИ ПредМесяц<>НачалоМесяца(СтрокаТЗ.ПЕриод)) Тогда
			Документы.ркОплата.ВыполнитьРаспределениеОплаты(ДокОплата);
			ДокОплата.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			Попытка
				ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокОплата.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;

			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		Если Счетчик = 0 И НЕ ТранзакцияАктивна Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			
			ДокОплата = Документы.ркОплата.СоздатьДокумент();
			ДокОплата.Дата = КонецМесяца(ПредМесяц);
			ДокОплата.ТипОперации = Перечисления.ркТипыОперацийОплаты.ЗачетОплаты;
			ДокОплата.СпособОплаты = Справочники.ркСпособыОплат.Основной;
			ДокОплата.Комментарий = "Дозагрузка данных "+ТекущаяДата();
			ДокОплата.Организация = Организация;
			ДокОплата.Ответственный = ПараметрыСеанса.ТекущийПользователь;			
		КонецЕсли;
		тЛицевойСчет = Справочники.ркЛицевыеСчета.НайтиПоКоду(СтрокаТЗ.НомерЛС);
		Если тЛицевойСчет.Пустая() ИЛИ тЛицевойСчет.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаСоставОплаты = ДокОплата.Состав.Добавить();
		НоваяСтрокаСоставОплаты.УК = тЛицевойСчет.Дом.УК;
		НоваяСтрокаСоставОплаты.ЛицевойСчет = тЛицевойСчет;
		НоваяСтрокаСоставОплаты.ВидРасчета = КонстантыОбработки.ВидРасчетаЭлектроэнергия;				
		НоваяСтрокаСоставОплаты.Поставщик = КонстантыОбработки.Поставщик;
		НоваяСтрокаСоставОплаты.ДатаОплаты =СтрокаТЗ.Период;
		Если ЗначениеЗаполнено(СтрокаТЗ.Сумма) Тогда
			НоваяСтрокаСоставОплаты.Сумма = СтрокаТЗ.Сумма;
		КонецЕсли;
		НоваяСтрокаСоставОплаты.ПравилаРаспределенияОплаты = ПравилоРаспределенияОплаты;
		
		
		Счетчик = Счетчик+1;
		ПредМесяц = НачалоМесяца(СтрокаТЗ.Период);
	КонецЦикла;
	Если ТранзакцияАктивна И Счетчик > 0 Тогда
		Документы.ркОплата.ВыполнитьРаспределениеОплаты(ДокОплата);
		ДокОплата.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
		Попытка
			ДокОплата.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокОплата.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьПоказанияОДПУ(Команда)
	
	СписокФайлов = НайтиФайлы(КаталогДанных,"Выгр*.dat");
	Для Каждого тФайл Из СписокФайлов Цикл
		Сообщить("Начало чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
		ФайлИсточник = тФайл.ПолноеИмя;
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));	
		ДогрузитьПоказанияОДПУСервер(Адрес);
		Сообщить("Окончение чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере	
Процедура ДогрузитьПоказанияОДПУСервер(пАдрес)
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);	
	ТЗПоказанийГПУ = ПолучитьТЗПоказанийГПУ();
	ДомаТЗ = ЗначениеИзФайла(ФайлПриемник);
	
	КонстантыОбработки = ПолучитьКонстантыОбработки();
	СтатусПроживает = Константы.ркСтатусПроживает.Получить();
	
	Счетчик = 0;
	ТранзакцияАктивна = Ложь;
	ДокИзм = Неопределено;
	ДокИзмГПУ = Неопределено;
	ДокПроживающие = Неопределено;
	ДокИзмИПУ = Неопределено;
	//ДокПоказанияСчетчиков = Неопределено;
	ДокОплата = Неопределено;
	ДокСоставНачислений = Неопределено;
	//ДокПоказанийГПУ = Неопределено;
	ТЗПоказаний = ПолучитьТЗПоказаний();
	Для Каждого стрДомаТЗ Из ДомаТЗ Цикл
		//Наименование
		//Улица
		//Номер
		//Корпус
		//ДатаПостановкиНаУчет
		//ДатаСнятияСУчета
		//ОДПУ (ТЗ)
		//Доп.реквизиты дома (ТЗ)
		//Лицевые счета (ТЗ)
		
		
		стрДома = Новый Структура("Наименование,Улица,Корпус,Номер,ДатаПостановкиНаУчет,ДатаСнятияСУчета,УК");
		ЗаполнитьЗначенияСвойств(стрДома,стрДомаТЗ);
		стрДома.Наименование = стрДомаТЗ.НаименованиеТекст;
		текДом = Справочники.ркДома.НайтиПоНаименованию(стрДома.Наименование,Истина);
		
		Если текДом.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого стрОдпуТЗ Из стрДомаТЗ.ОДПУ Цикл
			//Наименование
			//ДатаВыпуска
			//Номер
			//КлассТочности
			//НачальныеПоказания
			//ДатаВключения
			//ДатаПоверки
			//ДатаПроверки
			//МежповерочныйИнтервал
			
			текСчетчик = Справочники.ркСчетчики.НайтиПоРеквизиту("Номер",стрОдпуТЗ.Номер,,текДом);
			
			
			Для Каждого стрПоказанияОдпуТЗ Из стрОдпуТЗ.ПоказанияОДПУ Цикл
				//ВидПоказаний
				//МетодРасчета
				//НачальноеПоказание
				//КонечноеПоказание
				//Количество
				//ДатаПоказания
				//ДатаНачалаПериодаПоказаний
				//ДатаКонцаПериодаПоказаний
				
				//ВидПоказанийСпр = Справочники.ркВидыПоказанийСчетчиков.НайтиПоНаименованию(стрПоказанияОдпуТЗ.ВидПоказаний,Истина);
				//Если ВидПоказанийСпр.Пустая() Тогда
				//	НовыйВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.СоздатьЭлемент();
				//	НовыйВидПоказаний.Наименование = стрПоказанияОдпуТЗ.ВидПоказаний;
				//	НовыйВидПоказаний.УстановитьНовыйКод();
				//	НовыйВидПоказаний.ОбменДанными.Загрузка = Истина;
				//	НовыйВидПоказаний.Записать();
				//	ВидПоказанийСпр = НовыйВидПоказаний.Ссылка;
				//КонецЕсли;
				
				СтрокаТЗГПУ = ТЗПоказанийГПУ.Добавить();
				СтрокаТЗГПУ.ПериодПоказаний = стрПоказанияОдпуТЗ.ДатаПоказания;
				СтрокаТЗГПУ.Счетчик = текСчетчик;
				СтрокаТЗГПУ.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
				СтрокаТЗГПУ.НачальныеПоказания = стрПоказанияОдпуТЗ.НачальныеПоказания;
				СтрокаТЗГПУ.КонечныеПоказания = стрПоказанияОдпуТЗ.КонечныеПоказания;
				СтрокаТЗГПУ.Количество = стрПоказанияОдпуТЗ.Количество;
				СтрокаТЗГПУ.КоэффициентТрансформации = ?(ЗначениеЗаполнено(стрОдпуТЗ.КоэффициентТрансформации),стрОдпуТЗ.КоэффициентТрансформации,1);
				
			КонецЦикла;
			
		КонецЦикла;

		
	КонецЦикла;
	
	ДоЗаписатьПоказанияГПУ(ТЗПоказанийГПУ,КонстантыОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ДоЗаписатьПоказанияГПУ(пТЗ,КонстантыОбработки)
	
	пТЗ.Сортировать("ПериодПоказаний Возр");
	ДокПоказанийГПУ = Неопределено;
	
	ТранзакцияАктивна = Ложь;
	ПредыдущийПериодДействия = Дата(1,1,1);
	Счетчик = 0;
	
	Для Каждого СтрокаТЗ ИЗ пТЗ Цикл
		
		Если СтрокаТЗ.ПериодПоказаний < ДатаОграничения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТранзакцияАктивна И (Счетчик = 1000 ИЛИ СтрокаТЗ.ПериодПоказаний <> ПредыдущийПериодДействия) Тогда
			ДокПоказанийГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанийГПУ.Записать(РежимЗаписиДокумента.Проведение);			
			Счетчик = 0;
			ТранзакцияАктивна = Ложь;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если НЕ ТранзакцияАктивна Тогда
			
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ДокПоказанийГПУ = Документы.ркПоказанияГрупповыхСчетчиков.СоздатьДокумент();
			ДокПоказанийГПУ.Дата = СтрокаТЗ.ПериодПоказаний;
			ДокПоказанийГПУ.Комментарий = "До Загрузка данных ГПУ"+ТекущаяДата();
			ДокПоказанийГПУ.Организация = Организация;
			ДокПоказанийГПУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ДокПоказанийГПУ.ПериодПоказаний = СтрокаТЗ.ПериодПоказаний;
			ДокПоказанийГПУ.ТипОперации = Перечисления.ркТипыОперацийПоказанийСчетчиков.ПоказанияЗаПериод;			
		КонецЕсли;
		
		СтрокаПоказаний = ДокПоказанийГПУ.Состав.Добавить();
		СтрокаПоказаний.Счетчик = СтрокаТЗ.Счетчик;
		СтрокаПоказаний.ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.Обычные;
		СтрокаПоказаний.НачальныеПоказания = СтрокаТЗ.НачальныеПоказания;
		СтрокаПоказаний.КонечныеПоказания = СтрокаТЗ.КонечныеПоказания;
		СтрокаПоказаний.Количество = СтрокаТЗ.Количество;
		СтрокаПоказаний.КоэффициентТрансформации = СтрокаТЗ.КоэффициентТрансформации;
		
		ПредыдущийПериодДействия = СтрокаТЗ.ПериодПоказаний;
		Счетчик = Счетчик+1;
	КонецЦикла;

	Если ТранзакцияАктивна Тогда
		Если ДокПоказанийГПУ <> Неопределено Тогда
			ДокПоказанийГПУ.ДополнительныеСвойства.Вставить("ПроверкаПериодаПриЗаписи",Ложь);
			ДокПоказанийГПУ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	
КонецПроцедуры // ЗаписатьПоказанияГПУ()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ДатаОграничения) Тогда
		ДатаОграничения = Дата('20160601');
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог";
	Если Диалог.Выбрать() тогда
		КаталогДанных = Диалог.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьАбонентов(Команда)
	СписокФайлов = НайтиФайлы(КаталогДанных,"Выгр*.dat");
	Сч = 0;
	Для Каждого тФайл Из СписокФайлов Цикл
		Сообщить("Начало чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
		ФайлИсточник = тФайл.ПолноеИмя;
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));	
		Сч = Сч+КоличествоАбонентовВФайле(Адрес);	
		Сообщить(Сч);
		Сообщить("Окончение чтения из файла: "+тФайл.ПолноеИмя+" "+ТекущаяДатаСеансаНаСервере());		
	КонецЦикла;

	Сообщить(Сч);
КонецПроцедуры

&НаСервере	
Функция КоличествоАбонентовВФайле(пАдрес)
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("dat");
	ДанныеХранилища = ПолучитьИзВременногоХранилища(пАдрес);
	ДанныеХранилища.Записать(ФайлПриемник);	
	
	ДомаТЗ = ЗначениеИзФайла(ФайлПриемник);
	Сч = 0;
	Для Каждого стрДомаТЗ ИЗ ДомаТЗ Цикл
		Сч = Сч+стрДомаТЗ.ЛС.Количество();
	КонецЦикла;
	Возврат Сч;
	
КонецФункции;